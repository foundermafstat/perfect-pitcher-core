"use client"

import React, { useEffect, useMemo, useState, useCallback } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { ChevronUp, ChevronDown, Settings } from "lucide-react"

import useWebRTCAudioSession from "@/hooks/use-webrtc"
import { tools } from "@/lib/tools"
import { BroadcastButton } from "@/components/broadcast-button"
import { MessageControls } from "@/components/message-controls"
import { StatusDisplay } from "@/components/status"
import { TokenUsageDisplay } from "@/components/token-usage"
import { VoiceSelector } from "@/components/voice-select"
import Transcriber from "@/components/ui/transcriber"
import { Button } from "@/components/ui/button"
import { TextCommandInput } from "@/components/text-command-input"
import { ApiChatDisplay } from "@/components/api-chat-display"
import { useToolsFunctions } from "@/hooks/use-tools"
import { useTranslations } from "@/providers/translations-context"
import { ChatMessage } from "@/hooks/use-agent-chat"
import { StoryContextSelector } from "@/components/story-context-selector"
import { type Story } from "@/hooks/use-stories"

export function AgentInterface(): React.ReactElement {
  const [voice, setVoice] = useState("ash")
  const [selectedStory, setSelectedStory] = useState<Story | null>(null)
  const [isSettingsExpanded, setIsSettingsExpanded] = useState(true)

  const webrtcSession = useWebRTCAudioSession(voice, tools, selectedStory)
  const {
    status,
    isSessionActive,
    handleStartStopClick,
    msgs,
    conversation,
    registerFunction,
  } = webrtcSession

  const toolsFunctions = useToolsFunctions()
  const { t } = useTranslations()

  type SuggestedAction = { id: string; label: string; run: () => Promise<any> | any }
  const [suggested, setSuggested] = useState<SuggestedAction[]>([])

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ API
  const chatHistory: ChatMessage[] = useMemo(() => conversation.map(msg => ({
    id: msg.id,
    role: msg.role as "user" | "assistant",
    content: msg.text,
    timestamp: msg.timestamp
  })), [conversation])

  // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API —á–∞—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç WebRTC)
  const [apiChatHistory, setApiChatHistory] = useState<ChatMessage[]>([])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
  const handleAgentResponse = useCallback((response: string) => {
    const messageId = Math.random().toString(36).substring(2)
    const newMessage: ChatMessage = {
      id: messageId,
      role: "assistant",
      content: response,
      timestamp: new Date().toISOString()
    }
    
    setApiChatHistory(prev => [...prev, newMessage])
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ API
  const handleCommandSubmit = useCallback(async (text: string, files?: File[]) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é API —á–∞—Ç–∞
    const userMessageId = Math.random().toString(36).substring(2)
    const userMessage: ChatMessage = {
      id: userMessageId,
      role: "user",
      content: text + (files && files.length > 0 ? 
        `\nüìé –§–∞–π–ª—ã: ${files.map(f => f.name).join(', ')}` : ''),
      timestamp: new Date().toISOString(),
      files: files?.map(f => ({ name: f.name, type: f.type, size: f.size }))
    }
    
    setApiChatHistory(prev => [...prev, userMessage])
  }, [])

  const handleStoryContextChange = useCallback((story: Story | null) => {
    setSelectedStory(story)
  }, [])

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ TextCommandInput (—Ç–æ–ª—å–∫–æ API —á–∞—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
  const combinedHistory = useMemo(() => apiChatHistory, [apiChatHistory])

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const availableActions = useMemo(() => {
    const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';
    
    // –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const baseActions = [
      { id: "time", label: t("tools.availableTools.getTime.name") || "–í—Ä–µ–º—è", run: () => toolsFunctions.timeFunction() },
      { id: "theme", label: t("tools.availableTools.themeSwitcher.name") || "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", run: () => toolsFunctions.backgroundFunction() },
    ];

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    if (currentPath.includes('/presentation/')) {
      return [
        ...baseActions,
        { id: "next-slide", label: t("agent.interface.nextSlide") || "–°–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥", run: () => toolsFunctions.nextSlide() },
        { id: "prev-slide", label: t("agent.interface.prevSlide") || "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥", run: () => toolsFunctions.previousSlide() },
        { id: "goto-slide", label: t("agent.interface.gotoSlide") || "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–∞–π–¥—É 1", run: () => toolsFunctions.goToSlide({ slideNumber: 1 }) },
        { id: "party", label: t("tools.availableTools.partyMode.name") || "–í–µ—á–µ—Ä–∏–Ω–∫–∞", run: () => toolsFunctions.partyFunction() },
      ];
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    if (currentPath.includes('/editor/')) {
      return [
        ...baseActions,
        { id: "party", label: t("tools.availableTools.partyMode.name") || "–í–µ—á–µ—Ä–∏–Ω–∫–∞", run: () => toolsFunctions.partyFunction() },
        { id: "tasks-create", label: t("agent.interface.newTask") || "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", run: () => toolsFunctions.createTask({ title: "Demo task" }) },
      ];
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
    if (currentPath.includes('/projects') || currentPath.includes('/tasks')) {
      return [
        ...baseActions,
        { id: "tasks-list", label: t("agent.interface.taskList") || "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", run: () => toolsFunctions.listTasks() },
        { id: "tasks-create", label: t("agent.interface.newTask") || "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", run: () => toolsFunctions.createTask({ title: "Demo task" }) },
      ];
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    return [
      ...baseActions,
      { id: "party", label: t("tools.availableTools.partyMode.name") || "–í–µ—á–µ—Ä–∏–Ω–∫–∞", run: () => toolsFunctions.partyFunction() },
      { id: "copy", label: t("tools.availableTools.copyFn.name") || "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", run: () => toolsFunctions.copyToClipboard({ text: "Perfect Pitcher" }) },
      { id: "open", label: t("tools.availableTools.launchWebsite.name") || "–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", run: () => toolsFunctions.launchWebsite({ url: "https://openai.com" }) },
      { id: "scrape", label: t("tools.availableTools.scrapeWebsite.name") || "–ü–∞—Ä—Å–µ—Ä", run: () => toolsFunctions.scrapeWebsite({ url: "https://example.com" }) },
      { id: "tasks-list", label: t("agent.interface.taskList") || "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", run: () => toolsFunctions.listTasks() },
    ];
  }, [t, toolsFunctions])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
  const pickRandomActions = useCallback((arr: SuggestedAction[], n: number) => {
    const copy = [...arr]
    for (let i = copy.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[copy[i], copy[j]] = [copy[j], copy[i]]
    }
    return copy.slice(0, n)
  }, [])

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è WebRTC —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (isSessionActive) {
      const functionNames: Record<string, string> = {
        timeFunction: "getCurrentTime",
        backgroundFunction: "changeBackgroundColor", 
        partyFunction: "partyMode",
        launchWebsite: "launchWebsite",
        copyToClipboard: "copyToClipboard",
        scrapeWebsite: "scrapeWebsite",
        createTask: "createTask",
        listTasks: "listTasks",
        updateTask: "updateTask",
        deleteTask: "deleteTask",
        getAgentProjectContext: "getAgentProjectContext",
        navigateToPage: "navigateToPage",
        nextSlide: "nextSlide",
        previousSlide: "previousSlide",
        goToSlide: "goToSlide"
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è WebRTC —Å–µ—Å—Å–∏–∏
      for (const [functionName, openAIFunctionName] of Object.entries(functionNames)) {
        const fn = (toolsFunctions as any)[functionName]
        if (fn) {
          registerFunction(openAIFunctionName, fn)
        }
      }
    }
  }, [isSessionActive, toolsFunctions, registerFunction])

  useEffect(() => {
    // –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–±–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫
    setSuggested(pickRandomActions(availableActions, 4))
  }, [conversation.length, pickRandomActions])

  return (
    <div className="flex h-full w-full flex-col gap-3 p-3 overflow-hidden">
      <div className="bg-card text-card-foreground rounded-xl border shadow-sm flex-shrink-0">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        {selectedStory && (
          <div 
            className="flex items-center justify-between p-3 pb-5 cursor-pointer select-none"
            onClick={() => setIsSettingsExpanded(!isSettingsExpanded)}
          >
            <div className="flex items-center gap-2 text-sm font-medium">
              <Settings className="h-4 w-4" />
              {t("agent.interface.sessionSettings") || "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏"}
            </div>
            <motion.div
              animate={{ rotate: isSettingsExpanded ? 180 : 0 }}
              transition={{ duration: 0.2 }}
            >
              <ChevronUp className="h-4 w-4" />
            </motion.div>
          </div>
        )}
        
        {/* –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <AnimatePresence>
          {(!selectedStory || isSettingsExpanded) && (
            <motion.div
              initial={selectedStory ? { opacity: 0, height: 0 } : false}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}
              className="overflow-hidden"
            >
              <div className="p-3 space-y-3">
                <div className="flex gap-3 w-full">
                  <div className="flex-1">
                    <VoiceSelector value={voice} onValueChange={setVoice} />
                  </div>
                  <div className="flex-1">
                    <StoryContextSelector 
                      onContextChange={handleStoryContextChange}
                      selectedStoryId={selectedStory?.id}
                      disabled={isSessionActive}
                    />
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        
        {/* –ö–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞ */}
        <div className="p-3 pt-0">
          <BroadcastButton
            isSessionActive={isSessionActive}
            onClick={handleStartStopClick}
          />
        </div>
        
        {/* –°—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö */}
        {status && (
          <motion.div
            className="px-3 pb-3"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            transition={{ duration: 0.2 }}
          >
            <StatusDisplay status={status} />
          </motion.div>
        )}
        {msgs.length > 0 && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.2, delay: 0.1 }}
            className="px-3 pb-3 overflow-hidden"
          >
            <TokenUsageDisplay messages={msgs} />
          </motion.div>
        )}
      </div>

      <div className="flex-1 min-h-0 flex flex-col gap-3 overflow-hidden">
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ */}
        <div className="flex-1 min-h-0 space-y-3 overflow-auto">
          {/* WebRTC —Ä–∞–∑–≥–æ–≤–æ—Ä */}
          {conversation.length > 0 && (
            <div className="bg-card text-card-foreground rounded-xl border shadow-sm flex flex-col min-h-0">
              <h3 className="text-sm font-medium p-3 pb-2 flex-shrink-0">{t("agent.interface.voiceConversation") || "–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä"}</h3>
              <div className="flex-1 min-h-0 overflow-hidden px-3 pb-3">
                <Transcriber conversation={conversation} />
              </div>
            </div>
          )}
          
          {/* API —á–∞—Ç */}
          {apiChatHistory.length > 0 && (
            <div className="bg-card text-card-foreground rounded-xl border shadow-sm flex flex-col min-h-0">
              <h3 className="text-sm font-medium p-3 pb-0 flex-shrink-0">{t("agent.interface.textCommands") || "–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"}</h3>
              <div className="flex-1 min-h-0 overflow-hidden">
                <ApiChatDisplay messages={apiChatHistory} />
              </div>
            </div>
          )}
        </div>
        
        {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ */}
        {suggested.length > 0 && !isSessionActive && (
          <div className="flex-shrink-0 bg-card text-card-foreground rounded-xl border p-3 shadow-sm">
            <h4 className="text-xs font-medium mb-2 text-muted-foreground">{t("agent.interface.suggestions") || "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}</h4>
            <div className="flex flex-wrap gap-2">
              {suggested.map((a) => (
                <Button key={a.id} size="sm" variant="outline" onClick={() => a.run()}>
                  {a.label}
                </Button>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Text Command Input - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω */}
      <div className="flex-shrink-0">
        <TextCommandInput 
          onResponse={handleAgentResponse}
          onUserMessage={handleCommandSubmit}
          conversationHistory={combinedHistory}
          toolsFunctions={toolsFunctions}
          placeholder={t("agent.interface.enterCommand") || "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞..."}
        />
      </div>
    </div>
  )
}

export default AgentInterface


