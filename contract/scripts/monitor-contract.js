// scripts/monitor-contract.js - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
const { ethers } = require("hardhat");

// –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Core Testnet2
const CONTRACT_ADDRESS = "0xFe442AfE3571dFc30898a2edfCF0E1d2f291cF4A";

class ContractMonitor {
    constructor(contractAddress) {
        this.contractAddress = contractAddress;
        this.token = null;
        this.isMonitoring = false;
        this.eventCounts = {};
        this.startTime = Date.now();
    }

    async initialize() {
        console.log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
        this.token = await ethers.getContractAt("PerfectPitcherToken", this.contractAddress);
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:", this.contractAddress);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await this.showContractInfo();
    }

    async showContractInfo() {
        console.log("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:");
        console.log("- –ù–∞–∑–≤–∞–Ω–∏–µ:", await this.token.name());
        console.log("- –°–∏–º–≤–æ–ª:", await this.token.symbol());
        console.log("- Supply:", ethers.formatEther(await this.token.totalSupply()), "PRFCT");
        console.log("- –ë–ª–æ–∫:", await ethers.provider.getBlockNumber());
        console.log("- –í—Ä–µ–º—è:", new Date().toLocaleString());
    }

    startMonitoring() {
        console.log("\nüîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π...");
        console.log("üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è: Transfer, ServiceUsed, ResourcesLocked, ConfigUpdated");
        console.log("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
        
        this.isMonitoring = true;

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ Transfer —Å–æ–±—ã—Ç–∏–π
        this.token.on("Transfer", (from, to, value, event) => {
            this.logEvent("Transfer", {
                from: from,
                to: to,
                amount: ethers.formatEther(value) + " PRFCT",
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ServiceUsed —Å–æ–±—ã—Ç–∏–π
        this.token.on("ServiceUsed", (user, amount, serviceId, timestamp, event) => {
            this.logEvent("ServiceUsed", {
                user: user,
                amount: ethers.formatEther(amount) + " PRFCT",
                serviceId: serviceId,
                timestamp: new Date(Number(timestamp) * 1000).toLocaleString(),
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ResourcesLocked —Å–æ–±—ã—Ç–∏–π
        this.token.on("ResourcesLocked", (user, amount, lockId, unlockTime, serviceId, event) => {
            this.logEvent("ResourcesLocked", {
                user: user,
                amount: ethers.formatEther(amount) + " PRFCT",
                lockId: lockId,
                unlockTime: new Date(Number(unlockTime) * 1000).toLocaleString(),
                serviceId: serviceId,
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ResourcesUnlocked —Å–æ–±—ã—Ç–∏–π
        this.token.on("ResourcesUnlocked", (user, amount, lockId, isEmergency, event) => {
            this.logEvent("ResourcesUnlocked", {
                user: user,
                amount: ethers.formatEther(amount) + " PRFCT",
                lockId: lockId,
                isEmergency: isEmergency ? "üö® Emergency" : "‚è∞ Normal",
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ConfigUpdated —Å–æ–±—ã—Ç–∏–π
        this.token.on("ConfigUpdated", (parameter, oldValue, newValue, event) => {
            this.logEvent("ConfigUpdated", {
                parameter: parameter,
                oldValue: oldValue.toString(),
                newValue: newValue.toString(),
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ RoleGranted —Å–æ–±—ã—Ç–∏–π
        this.token.on("RoleGranted", (role, account, sender, event) => {
            this.logEvent("RoleGranted", {
                role: this.getRoleName(role),
                account: account,
                sender: sender,
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ Paused/Unpaused —Å–æ–±—ã—Ç–∏–π
        this.token.on("Paused", (account, event) => {
            this.logEvent("Paused", {
                account: account,
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        this.token.on("Unpaused", (account, event) => {
            this.logEvent("Unpaused", {
                account: account,
                txHash: event.log.transactionHash,
                block: event.log.blockNumber
            });
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.statsInterval = setInterval(() => {
            this.showStats();
        }, 30000);
    }

    logEvent(eventName, data) {
        if (!this.isMonitoring) return;

        const timestamp = new Date().toLocaleTimeString();
        const emoji = this.getEventEmoji(eventName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.eventCounts[eventName] = (this.eventCounts[eventName] || 0) + 1;

        console.log(`\n${emoji} ${eventName} [${timestamp}]`);
        console.log("‚îÄ".repeat(50));
        
        for (const [key, value] of Object.entries(data)) {
            console.log(`  ${key}: ${value}`);
        }
        
        console.log("‚îÄ".repeat(50));
    }

    getEventEmoji(eventName) {
        const emojis = {
            "Transfer": "üí∏",
            "ServiceUsed": "ü§ñ",
            "ResourcesLocked": "üîí",
            "ResourcesUnlocked": "üîì",
            "ConfigUpdated": "‚öôÔ∏è",
            "RoleGranted": "üëë",
            "RoleRevoked": "üö´",
            "Paused": "‚è∏Ô∏è",
            "Unpaused": "‚ñ∂Ô∏è"
        };
        return emojis[eventName] || "üìã";
    }

    getRoleName(roleHash) {
        // –•–µ—à–∏ —Ä–æ–ª–µ–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const roles = {
            "0x0000000000000000000000000000000000000000000000000000000000000000": "DEFAULT_ADMIN_ROLE",
            "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929": "OPERATOR_ROLE",
            "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a": "PAUSER_ROLE",
            "0x189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3": "UPGRADER_ROLE",
            "0x6b91dbd22e8e58fe70c2ab0ac1ff39e0c4c1c4e9a42e24d44ee1bb7facd59ce3": "SERVICE_ROLE"
        };
        return roles[roleHash] || roleHash;
    }

    showStats() {
        const runtime = Math.floor((Date.now() - this.startTime) / 1000);
        const minutes = Math.floor(runtime / 60);
        const seconds = runtime % 60;
        
        console.log("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê");
        console.log("‚ïê".repeat(50));
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${minutes}–º ${seconds}—Å`);
        console.log(`üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString()}`);
        
        if (Object.keys(this.eventCounts).length > 0) {
            console.log("\nüìà –°–æ–±—ã—Ç–∏—è –∑–∞ —Å–µ—Å—Å–∏—é:");
            for (const [event, count] of Object.entries(this.eventCounts)) {
                console.log(`  ${this.getEventEmoji(event)} ${event}: ${count}`);
            }
        } else {
            console.log("\nüí§ –°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ");
        }
        console.log("‚ïê".repeat(50));
    }

    async getRecentEvents(fromBlock = -100) {
        console.log("\nüìú –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π...");
        
        try {
            const currentBlock = await ethers.provider.getBlockNumber();
            const startBlock = Math.max(0, currentBlock + fromBlock);
            
            console.log(`üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π —Å –±–ª–æ–∫–∞ ${startBlock} –ø–æ ${currentBlock}`);
            
            const transferFilter = this.token.filters.Transfer();
            const transfers = await this.token.queryFilter(transferFilter, startBlock);
            
            const serviceFilter = this.token.filters.ServiceUsed();
            const services = await this.token.queryFilter(serviceFilter, startBlock);
            
            const lockFilter = this.token.filters.ResourcesLocked();
            const locks = await this.token.queryFilter(lockFilter, startBlock);
            
            console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:`);
            console.log(`  üí∏ Transfers: ${transfers.length}`);
            console.log(`  ü§ñ Service Used: ${services.length}`);
            console.log(`  üîí Resources Locked: ${locks.length}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            if (transfers.length > 0) {
                console.log("\nüí∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ Transfers:");
                transfers.slice(-5).forEach(event => {
                    console.log(`  ${event.args.from} ‚Üí ${event.args.to}: ${ethers.formatEther(event.args.value)} PRFCT`);
                });
            }
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:", error.message);
        }
    }

    stopMonitoring() {
        console.log("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
        this.isMonitoring = false;
        
        if (this.token) {
            this.token.removeAllListeners();
        }
        
        if (this.statsInterval) {
            clearInterval(this.statsInterval);
        }
        
        this.showStats();
        console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
}

async function main() {
    const monitor = new ContractMonitor(CONTRACT_ADDRESS);
    
    try {
        await monitor.initialize();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await monitor.getRecentEvents(-50);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor.startMonitoring();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è graceful shutdown
        process.on('SIGINT', () => {
            monitor.stopMonitoring();
            process.exit(0);
        });
        
        // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        while (monitor.isMonitoring) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", error);
        process.exit(1);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = { ContractMonitor, CONTRACT_ADDRESS };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    main();
}
