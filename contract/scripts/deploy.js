// scripts/deploy.js
const { ethers, upgrades } = require("hardhat");

async function main() {
    console.log("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Perfect Pitcher Token –Ω–∞ Core blockchain...");
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Core mainnet
    const TREASURY_ADDRESS = "0x742d35Cc6131b3d2F0bF12A1a91B8b58F1a04e5d"; // –ê–¥—Ä–µ—Å treasury (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    const ICECREAM_ROUTER = "0x8f08C0D82b04176b5C778BFE5A4b74EF433E4F4A"; // IceCreamSwap Router
    const CORE_PRICE_FEED = "0x8418C4Ab5928c1EbD3b6a6b3BC7b2F4a8A2F9e6c"; // Chainlink CORE/USD price feed (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    const USDT_PRICE_FEED = "0x7B5E8D90e3e1Fc8A82B35a4a3b3E2A1D5B5A8C3E"; // Chainlink USDT/USD price feed (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    
    const [deployer] = await ethers.getSigners();
    console.log("üìã –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–∞:", deployer.address);
    console.log("üí∞ –ë–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞:", ethers.utils.formatEther(await deployer.getBalance()), "CORE");
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const PerfectPitcherToken = await ethers.getContractFactory("PerfectPitcherToken");
    
    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ UUPS proxy
    console.log("üîß –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ UUPS proxy –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
    const token = await upgrades.deployProxy(
        PerfectPitcherToken,
        [
            TREASURY_ADDRESS,
            ICECREAM_ROUTER,
            CORE_PRICE_FEED,
            USDT_PRICE_FEED
        ],
        { 
            initializer: 'initialize',
            kind: 'uups'
        }
    );
    
    await token.deployed();
    
    console.log("‚úÖ Perfect Pitcher Token —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É:", token.address);
    console.log("üìù Proxy admin:", await upgrades.erc1967.getAdminAddress(token.address));
    console.log("üîß Implementation:", await upgrades.erc1967.getImplementationAddress(token.address));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞
    console.log("\\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–∞:");
    console.log("- –ù–∞–∑–≤–∞–Ω–∏–µ:", await token.name());
    console.log("- –°–∏–º–≤–æ–ª:", await token.symbol());
    console.log("- –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏:", await token.decimals());
    console.log("- –û–±—â–∏–π –æ–±—ä–µ–º —ç–º–∏—Å—Å–∏–∏:", ethers.utils.formatEther(await token.totalSupply()), "PRFCT");
    console.log("- –ë–∞–ª–∞–Ω—Å treasury:", ethers.utils.formatEther(await token.balanceOf(TREASURY_ADDRESS)), "PRFCT");
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π
    console.log("\\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π...");
    
    const OPERATOR_ROLE = await token.OPERATOR_ROLE();
    const SERVICE_ROLE = await token.SERVICE_ROLE();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ backend —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ OPERATOR (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å)
    const BACKEND_ADDRESS = "0x8C8e6e8E7Af4a1B7B5A9C8D7E3F6A2B1C9D8E7F6"; 
    try {
        await token.grantRole(OPERATOR_ROLE, BACKEND_ADDRESS);
        console.log(`‚úÖ OPERATOR_ROLE –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${BACKEND_ADDRESS}`);
    } catch (error) {
        console.log(`‚ö†Ô∏è  –†–æ–ª—å OPERATOR —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ API —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–∫ SERVICE_ROLE (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å)
    const API_SERVICE_ADDRESS = "0x9D9f7f7F8E8E9F0F1G1H2I3J4K5L6M7N8O9P0Q1R"; 
    try {
        await token.grantRole(SERVICE_ROLE, API_SERVICE_ADDRESS);
        console.log(`‚úÖ SERVICE_ROLE –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${API_SERVICE_ADDRESS}`);
    } catch (error) {
        console.log(`‚ö†Ô∏è  –†–æ–ª—å SERVICE —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    console.log("\\nüë• –°—Ç–∞—Ç—É—Å —Ä–æ–ª–µ–π:");
    console.log("- DEFAULT_ADMIN_ROLE (deployer):", await token.hasRole(await token.DEFAULT_ADMIN_ROLE(), deployer.address));
    console.log("- OPERATOR_ROLE (backend):", await token.hasRole(OPERATOR_ROLE, BACKEND_ADDRESS));
    console.log("- SERVICE_ROLE (API):", await token.hasRole(SERVICE_ROLE, API_SERVICE_ADDRESS));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const config = await token.config();
    console.log("\\n‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:");
    console.log("- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç—ã:", ethers.utils.formatEther(config.maxSpendingAmount), "PRFCT");
    console.log("- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", config.maxLockDuration.toString(), "—Å–µ–∫—É–Ω–¥");
    console.log("- –ö–æ–º–∏—Å—Å–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", config.emergencyUnlockFee.toString() / 100, "%");
    
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    console.log("\\nüîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
    if (hre.network.name !== "hardhat") {
        try {
            await hre.run("verify:verify", {
                address: await upgrades.erc1967.getImplementationAddress(token.address),
                constructorArguments: [],
            });
            console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
        } catch (error) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error.message);
        }
    } else {
        console.log("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏");
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const deploymentInfo = {
        network: hre.network.name,
        tokenAddress: token.address,
        proxyAdmin: await upgrades.erc1967.getAdminAddress(token.address),
        implementation: await upgrades.erc1967.getImplementationAddress(token.address),
        treasury: TREASURY_ADDRESS,
        dexRouter: ICECREAM_ROUTER,
        deployer: deployer.address,
        blockNumber: await ethers.provider.getBlockNumber(),
        timestamp: new Date().toISOString(),
        gasUsed: "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è...",
        roles: {
            backend: BACKEND_ADDRESS,
            apiService: API_SERVICE_ADDRESS
        }
    };
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    const deploymentPath = `./deployments/${hre.network.name}-deployment.json`;
    fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
    
    console.log("\\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:", deploymentPath);
    console.log("\\nüéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    console.log("\\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.log("1. –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ BACKEND_ADDRESS –∏ API_SERVICE_ADDRESS –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ");
    console.log("2. –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ —Ü–µ–Ω–æ–≤—ã—Ö –æ—Ä–∞–∫—É–ª–æ–≤ Chainlink –¥–ª—è Core blockchain");
    console.log("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
    console.log("4. –°–æ–∑–¥–∞–π—Ç–µ –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ IceCreamSwap");
    console.log("5. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ testnet");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:", error);
        process.exit(1);
    });

