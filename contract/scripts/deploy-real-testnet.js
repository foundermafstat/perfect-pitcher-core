// scripts/deploy-real-testnet.js - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã–π Core Testnet
const { ethers, upgrades, network } = require("hardhat");
const fs = require('fs');

async function main() {
    console.log("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Perfect Pitcher Token –≤ Core Testnet2");
    console.log("‚ïê".repeat(60));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
    console.log("üåê –°–µ—Ç—å:", network.name);
    console.log("üîó Chain ID:", network.config.chainId);
    console.log("üåç RPC URL:", network.config.url);
    
    if (network.name !== 'coreTestnet') {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å --network coreTestnet");
        process.exit(1);
    }
    
    try {
        const [deployer] = await ethers.getSigners();
        console.log("üë§ –î–µ–ø–ª–æ–π–µ—Ä:", deployer.address);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        const balance = await ethers.provider.getBalance(deployer.address);
        console.log("üí∞ –ë–∞–ª–∞–Ω—Å:", ethers.formatEther(balance), "TCORE2");
        
        if (balance < ethers.parseEther("0.1")) {
            console.warn("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 0.1 TCORE2 –¥–ª—è –¥–µ–ø–ª–æ—è");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –∏ gas price
        const blockNumber = await ethers.provider.getBlockNumber();
        console.log("üì¶ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫:", blockNumber);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è Core Testnet
        const REAL_ADDRESSES = {
            treasury: deployer.address, // –í —Ç–µ—Å—Ç–Ω–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ø–ª–æ–π–µ—Ä–∞ –∫–∞–∫ treasury
            // –†–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è Core Testnet (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã)
            iceCreamRouter: "0x8f08C0D82b04176b5C778BFE5A4b74EF433E4F4A", // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            // –î–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
            corePriceFeed: null, // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω mock
            usdtPriceFeed: null, // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω mock
        };
        
        console.log("\\nüèóÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é...");
        
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º mock price feeds –¥–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞
        console.log("üìä –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Mock Price Feeds...");
        
        const MockPriceFeed = await ethers.getContractFactory("MockAggregatorV3");
        
        // CORE/USD price feed (~$1.50)
        const corePriceFeed = await MockPriceFeed.deploy(ethers.parseUnits("1.50", 8));
        await corePriceFeed.waitForDeployment();
        REAL_ADDRESSES.corePriceFeed = await corePriceFeed.getAddress();
        console.log("‚úÖ CORE/USD Price Feed:", REAL_ADDRESSES.corePriceFeed);
        
        // USDT/USD price feed (~$1.00)
        const usdtPriceFeed = await MockPriceFeed.deploy(ethers.parseUnits("1.00", 8));
        await usdtPriceFeed.waitForDeployment();
        REAL_ADDRESSES.usdtPriceFeed = await usdtPriceFeed.getAddress();
        console.log("‚úÖ USDT/USD Price Feed:", REAL_ADDRESSES.usdtPriceFeed);
        
        // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º mock DEX router –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log("\\nüîÑ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Mock DEX Router...");
        const MockRouter = await ethers.getContractFactory("MockDEXRouter");
        const mockRouter = await MockRouter.deploy();
        await mockRouter.waitForDeployment();
        const mockRouterAddress = await mockRouter.getAddress();
        console.log("‚úÖ Mock DEX Router:", mockRouterAddress);
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        console.log("\\nüéØ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Perfect Pitcher Token...");
        
        const PerfectPitcherToken = await ethers.getContractFactory("PerfectPitcherToken");
        
        console.log("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:");
        console.log("  Treasury:", REAL_ADDRESSES.treasury);
        console.log("  DEX Router:", mockRouterAddress);
        console.log("  CORE Price Feed:", REAL_ADDRESSES.corePriceFeed);
        console.log("  USDT Price Feed:", REAL_ADDRESSES.usdtPriceFeed);
        
        // –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
        console.log("\\n‚õΩ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...");
        
        const gasEstimate = await ethers.provider.estimateGas({
            data: PerfectPitcherToken.bytecode
        });
        
        const gasPrice = await ethers.provider.getFeeData().then(fee => fee.gasPrice);
        const estimatedCost = gasEstimate * gasPrice;
        
        console.log("üìä –ì–∞–∑ –æ—Ü–µ–Ω–∫–∞:", gasEstimate.toString());
        console.log("‚õΩ Gas Price:", ethers.formatUnits(gasPrice, "gwei"), "gwei");
        console.log("üí∏ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:", ethers.formatEther(estimatedCost), "TCORE2");
        
        // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ UUPS proxy
        console.log("\\nüöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...");
        
        const token = await upgrades.deployProxy(
            PerfectPitcherToken,
            [
                REAL_ADDRESSES.treasury,
                mockRouterAddress,
                REAL_ADDRESSES.corePriceFeed,
                REAL_ADDRESSES.usdtPriceFeed
            ],
            { 
                initializer: 'initialize',
                kind: 'uups',
                timeout: 0 // –ë–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
            }
        );
        
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
        await token.waitForDeployment();
        
        const tokenAddress = await token.getAddress();
        console.log("‚úÖ Perfect Pitcher Token —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!");
        console.log("üìç Proxy –∞–¥—Ä–µ—Å:", tokenAddress);
        
        // –ü–æ–ª—É—á–∞–µ–º implementation –∞–¥—Ä–µ—Å
        try {
            const implementationAddress = await upgrades.erc1967.getImplementationAddress(tokenAddress);
            console.log("üîß Implementation –∞–¥—Ä–µ—Å:", implementationAddress);
        } catch (error) {
            console.log("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å implementation –∞–¥—Ä–µ—Å:", error.message);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
        console.log("\\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...");
        const name = await token.name();
        const symbol = await token.symbol();
        const totalSupply = await token.totalSupply();
        const treasuryBalance = await token.balanceOf(REAL_ADDRESSES.treasury);
        
        console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ:", name);
        console.log("‚úÖ –°–∏–º–≤–æ–ª:", symbol);
        console.log("‚úÖ Total Supply:", ethers.formatEther(totalSupply), symbol);
        console.log("‚úÖ Treasury Balance:", ethers.formatEther(treasuryBalance), symbol);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π
        console.log("\\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π...");
        
        const OPERATOR_ROLE = await token.OPERATOR_ROLE();
        const SERVICE_ROLE = await token.SERVICE_ROLE();
        
        await token.grantRole(OPERATOR_ROLE, deployer.address);
        console.log("‚úÖ OPERATOR_ROLE –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–µ–ø–ª–æ–π–µ—Ä—É");
        
        await token.grantRole(SERVICE_ROLE, deployer.address);
        console.log("‚úÖ SERVICE_ROLE –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–µ–ø–ª–æ–π–µ—Ä—É");
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
        const deploymentInfo = {
            network: network.name,
            chainId: network.config.chainId,
            rpcUrl: network.config.url,
            deployer: deployer.address,
            deployerBalance: ethers.formatEther(await ethers.provider.getBalance(deployer.address)),
            timestamp: new Date().toISOString(),
            blockNumber: await ethers.provider.getBlockNumber(),
            
            // –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            tokenProxy: tokenAddress,
            implementation: await upgrades.erc1967.getImplementationAddress(tokenAddress).catch(() => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            treasury: REAL_ADDRESSES.treasury,
            mockRouter: mockRouterAddress,
            corePriceFeed: REAL_ADDRESSES.corePriceFeed,
            usdtPriceFeed: REAL_ADDRESSES.usdtPriceFeed,
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
            tokenName: name,
            tokenSymbol: symbol,
            totalSupply: ethers.formatEther(totalSupply),
            
            // –°—Å—ã–ª–∫–∏
            explorer: `https://scan.test2.btcs.network/address/${tokenAddress}`,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è .env
            envVariables: {
                TOKEN_ADDRESS: tokenAddress,
                TREASURY_ADDRESS: REAL_ADDRESSES.treasury,
                MOCK_ROUTER: mockRouterAddress,
                CORE_PRICE_FEED: REAL_ADDRESSES.corePriceFeed,
                USDT_PRICE_FEED: REAL_ADDRESSES.usdtPriceFeed
            }
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É deployments –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync('./deployments')) {
            fs.mkdirSync('./deployments');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const deploymentFile = `./deployments/core-testnet-${timestamp}.json`;
        fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
        
        console.log("\\nüìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:", deploymentFile);
        
        // –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log("\\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!");
        console.log("‚ïê".repeat(60));
        console.log("üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", tokenAddress);
        console.log("üåê Explorer:", deploymentInfo.explorer);
        console.log("üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è:", ethers.formatEther(await ethers.provider.getBalance(deployer.address)), "TCORE2");
        
        console.log("\\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
        console.log("1. –î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª:");
        console.log(`   TOKEN_ADDRESS=${tokenAddress}`);
        console.log("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ explorer:", deploymentInfo.explorer);
        console.log("3. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
        console.log("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:");
        console.log(`   npx hardhat verify --network coreTestnet ${tokenAddress}`);
        
        return {
            tokenAddress,
            deploymentInfo
        };
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:", error);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if (error.message.includes("insufficient funds")) {
            console.error("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å TCORE2 —Ç–æ–∫–µ–Ω–∞–º–∏");
            console.error("üîó –ö—Ä–∞–Ω Core Testnet2: https://scan.test2.btcs.network/faucet");
        } else if (error.message.includes("network")) {
            console.error("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RPC URL –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
        } else if (error.message.includes("nonce")) {
            console.error("üî¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å nonce. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ");
        }
        
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
            process.exit(1);
        });
}

module.exports = { main };
