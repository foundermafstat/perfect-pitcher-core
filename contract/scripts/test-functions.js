// scripts/test-functions.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const { ethers } = require("hardhat");

async function main() {
    // –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const TOKEN_ADDRESS = "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9";
    
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Perfect Pitcher Token...");
    console.log("üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", TOKEN_ADDRESS);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const token = await ethers.getContractAt("PerfectPitcherToken", TOKEN_ADDRESS);
    const [deployer, user1] = await ethers.getSigners();
    
    console.log("üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", deployer.address);
    
    try {
        // 1. –¢–µ—Å—Ç SaaS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ - —Ç—Ä–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–∏—Å
        console.log("\\nüí∞ –¢–µ—Å—Ç 1: –¢—Ä–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ AI-—Å–µ—Ä–≤–∏—Å");
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã —Å–µ–±–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await token.transfer(deployer.address, ethers.parseEther("1000"));
        console.log("‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ 1000 PRFCT –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç");
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º spending allowance
        await token.setSpendingAllowance(deployer.address, ethers.parseEther("500"));
        console.log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω spending allowance: 500 PRFCT");
        
        // –¢—Ä–∞—Ç–∏–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ AI-—Å–µ—Ä–≤–∏—Å
        const serviceId = ethers.keccak256(ethers.toUtf8Bytes("image_generation"));
        const spendAmount = ethers.parseEther("50");
        
        const balanceBefore = await token.balanceOf(deployer.address);
        await token.spendOnService(deployer.address, spendAmount, serviceId);
        const balanceAfter = await token.balanceOf(deployer.address);
        
        console.log("‚úÖ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ AI-—Å–µ—Ä–≤–∏—Å:", ethers.formatEther(spendAmount), "PRFCT");
        console.log("üìä –ë–∞–ª–∞–Ω—Å –¥–æ:", ethers.formatEther(balanceBefore), "PRFCT");
        console.log("üìä –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ:", ethers.formatEther(balanceAfter), "PRFCT");
        
        // 2. –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
        console.log("\\nüîí –¢–µ—Å—Ç 2: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏");
        
        const lockAmount = ethers.parseEther("100");
        const lockDuration = 3600; // 1 —á–∞—Å
        const broadcastServiceId = ethers.keccak256(ethers.toUtf8Bytes("live_broadcast"));
        
        const tx = await token.lockResourcesForBroadcast(lockAmount, lockDuration, broadcastServiceId);
        const receipt = await tx.wait();
        
        // –ù–∞–π–¥–µ–º —Å–æ–±—ã—Ç–∏–µ ResourcesLocked
        const lockEvent = receipt.logs.find(log => {
            try {
                const parsed = token.interface.parseLog(log);
                return parsed.name === "ResourcesLocked";
            } catch (e) {
                return false;
            }
        });
        
        if (lockEvent) {
            const parsedEvent = token.interface.parseLog(lockEvent);
            const lockId = parsedEvent.args.lockId;
            console.log("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:", ethers.formatEther(lockAmount), "PRFCT");
            console.log("üîë Lock ID:", lockId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            const lockInfo = await token.getLockInfo(deployer.address, lockId);
            console.log("üìã –°—É–º–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", ethers.formatEther(lockInfo.amount), "PRFCT");
            console.log("üìã –í—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", new Date(Number(lockInfo.unlockTime) * 1000).toLocaleString());
            console.log("üìã –ê–∫—Ç–∏–≤–Ω–∞:", lockInfo.isActive);
        }
        
        // 3. –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        console.log("\\nüö® –¢–µ—Å—Ç 3: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞");
        
        if (lockEvent) {
            const parsedEvent = token.interface.parseLog(lockEvent);
            const lockId = parsedEvent.args.lockId;
            
            const contractBalanceBefore = await token.balanceOf(TOKEN_ADDRESS);
            await token.emergencyUnlock(lockId);
            const contractBalanceAfter = await token.balanceOf(TOKEN_ADDRESS);
            
            console.log("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
            console.log("üìä –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ:", ethers.formatEther(contractBalanceBefore), "PRFCT");
            console.log("üìä –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ:", ethers.formatEther(contractBalanceAfter), "PRFCT");
        }
        
        // 4. –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        console.log("\\nüì¶ –¢–µ—Å—Ç 4: –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
        
        const testUsers = [deployer.address, deployer.address]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –¥–≤–∞–∂–¥—ã
        const testAmounts = [ethers.parseEther("200"), ethers.parseEther("300")];
        
        await token.batchSetSpendingAllowances(testUsers, testAmounts);
        console.log("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ allowances –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
        
        const finalAllowance = await token.spendingAllowances(deployer.address);
        console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–π allowance:", ethers.formatEther(finalAllowance), "PRFCT");
        
        // 5. –¢–µ—Å—Ç –ø–∞—É–∑—ã —Ñ—É–Ω–∫—Ü–∏–π
        console.log("\\n‚è∏Ô∏è  –¢–µ—Å—Ç 5: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π");
        
        const burnSelector = token.interface.getFunction("burn").selector;
        await token.pauseFunction(burnSelector, true);
        console.log("‚úÖ –§—É–Ω–∫—Ü–∏—è burn –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        
        try {
            await token.burn(ethers.parseEther("1"));
            console.log("‚ùå –û—à–∏–±–∫–∞: burn –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        } catch (error) {
            console.log("‚úÖ burn –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:", error.message.includes("Function is paused"));
        }
        
        // –°–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É
        await token.pauseFunction(burnSelector, false);
        await token.burn(ethers.parseEther("1"));
        console.log("‚úÖ –ü–∞—É–∑–∞ —Å–Ω—è—Ç–∞, burn —Ä–∞–±–æ—Ç–∞–µ—Ç");
        
        // 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log("\\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        const finalBalance = await token.balanceOf(deployer.address);
        const totalSupply = await token.totalSupply();
        const contractBalance = await token.balanceOf(TOKEN_ADDRESS);
        
        console.log("- –ë–∞–ª–∞–Ω—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", ethers.formatEther(finalBalance), "PRFCT");
        console.log("- –û–±—â–∏–π supply:", ethers.formatEther(totalSupply), "PRFCT");
        console.log("- –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", ethers.formatEther(contractBalance), "PRFCT");
        
        console.log("\\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
        throw error;
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
        process.exit(1);
    });

