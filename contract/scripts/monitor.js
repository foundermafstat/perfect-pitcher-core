// scripts/monitor.js - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π Perfect Pitcher Token
const { ethers } = require("hardhat");
const WebSocket = require('ws');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    TOKEN_ADDRESS: process.env.TOKEN_ADDRESS || "0x...", // –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    NETWORK: process.env.NETWORK || "coreTestnet",
    WEBHOOK_URL: process.env.WEBHOOK_URL || null, // Discord/Slack webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    LOG_FILE: "./logs/monitor.log",
    ALERT_THRESHOLDS: {
        LARGE_SPENDING: ethers.utils.parseEther("10000"), // 10k —Ç–æ–∫–µ–Ω–æ–≤
        LARGE_LOCK: ethers.utils.parseEther("50000"),     // 50k —Ç–æ–∫–µ–Ω–æ–≤
        LARGE_SWAP: ethers.utils.parseEther("1000"),      // 1k —Ç–æ–∫–µ–Ω–æ–≤
        EMERGENCY_EVENTS: true // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    }
};

class PerfectPitcherMonitor {
    constructor() {
        this.token = null;
        this.provider = null;
        this.isRunning = false;
        this.eventCounts = {
            serviceSpending: 0,
            resourcesLocked: 0,
            resourcesUnlocked: 0,
            swapExecuted: 0,
            emergencyEvents: 0
        };
        this.startTime = Date.now();
        
        this.initializeLogger();
    }
    
    async initialize() {
        try {
            console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perfect Pitcher Monitor...");
            console.log(`üì° –°–µ—Ç—å: ${CONFIG.NETWORK}`);
            console.log(`üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${CONFIG.TOKEN_ADDRESS}`);
            
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            this.provider = ethers.provider;
            
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
            this.token = await ethers.getContractAt("PerfectPitcherToken", CONFIG.TOKEN_ADDRESS);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const name = await this.token.name();
            const symbol = await this.token.symbol();
            const totalSupply = await this.token.totalSupply();
            
            console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${name} (${symbol})`);
            console.log(`üìä –û–±—â–∏–π –æ–±—ä–µ–º —ç–º–∏—Å—Å–∏–∏: ${ethers.utils.formatEther(totalSupply)} PRFCT`);
            
            this.log("Monitor initialized successfully", "INFO");
            return true;
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error.message);
            this.log(\`Initialization failed: \${error.message}\`, "ERROR");
            return false;
        }
    }
    
    async startMonitoring() {
        if (!this.token) {
            console.error("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.");
            return;
        }
        
        console.log("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π...");
        this.isRunning = true;
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö SaaS —Å–æ–±—ã—Ç–∏–π
        this.setupServiceSpendingMonitor();
        this.setupResourceLockingMonitor();
        this.setupSwapMonitor();
        this.setupSecurityMonitor();
        this.setupAdminMonitor();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.setupPeriodicReports();
        
        console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!");
        this.log("Monitoring started", "INFO");
    }
    
    setupServiceSpendingMonitor() {
        this.token.on("ServiceSpending", async (user, amount, serviceId, service, event) => {
            this.eventCounts.serviceSpending++;
            
            const amountFormatted = ethers.utils.formatEther(amount);
            const serviceIdString = ethers.utils.parseBytes32String(serviceId);
            
            const logData = {
                type: 'service_spending',
                user,
                amount: amountFormatted,
                serviceId: serviceIdString,
                service,
                txHash: event.transactionHash,
                blockNumber: event.blockNumber,
                timestamp: Date.now()
            };
            
            console.log(\`üî• Service Spending:
                üë§ User: \${user}
                üí∞ Amount: \${amountFormatted} PRFCT
                üõ†Ô∏è  Service: \${serviceIdString}
                üè¢ Provider: \${service}
                üìÑ Tx: \${event.transactionHash}
            \`);
            
            this.log(\`ServiceSpending: \${user} spent \${amountFormatted} PRFCT on \${serviceIdString}\`, "INFO");
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await this.sendToAnalytics(logData);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞—Ç—ã
            if (ethers.utils.parseEther(amountFormatted).gte(CONFIG.ALERT_THRESHOLDS.LARGE_SPENDING)) {
                await this.sendAlert(\`üö® –ö—Ä—É–ø–Ω–∞—è —Ç—Ä–∞—Ç–∞: \${amountFormatted} PRFCT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º \${user}\`);
            }
        });
    }
    
    setupResourceLockingMonitor() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        this.token.on("ResourcesLocked", async (user, amount, serviceId, lockId, event) => {
            this.eventCounts.resourcesLocked++;
            
            const amountFormatted = ethers.utils.formatEther(amount);
            const serviceIdString = ethers.utils.parseBytes32String(serviceId);
            
            console.log(\`üîí Resources Locked:
                üë§ User: \${user}
                üí∞ Amount: \${amountFormatted} PRFCT
                üõ†Ô∏è  Service: \${serviceIdString}
                üîë Lock ID: \${lockId}
                üìÑ Tx: \${event.transactionHash}
            \`);
            
            this.log(\`ResourcesLocked: \${user} locked \${amountFormatted} PRFCT for \${serviceIdString}\`, "INFO");
            
            if (ethers.utils.parseEther(amountFormatted).gte(CONFIG.ALERT_THRESHOLDS.LARGE_LOCK)) {
                await this.sendAlert(\`üîí –ö—Ä—É–ø–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: \${amountFormatted} PRFCT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º \${user}\`);
            }
        });
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        this.token.on("ResourcesUnlocked", async (user, amount, lockId, event) => {
            this.eventCounts.resourcesUnlocked++;
            
            const amountFormatted = ethers.utils.formatEther(amount);
            
            console.log(\`üîì Resources Unlocked:
                üë§ User: \${user}
                üí∞ Amount: \${amountFormatted} PRFCT
                üîë Lock ID: \${lockId}
                üìÑ Tx: \${event.transactionHash}
            \`);
            
            this.log(\`ResourcesUnlocked: \${user} unlocked \${amountFormatted} PRFCT\`, "INFO");
        });
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        this.token.on("EmergencyUnlock", async (user, lockId, fee, event) => {
            this.eventCounts.emergencyEvents++;
            
            const feeFormatted = ethers.utils.formatEther(fee);
            
            console.log(\`üö® Emergency Unlock:
                üë§ User: \${user}
                üîë Lock ID: \${lockId}
                üí∏ Fee: \${feeFormatted} PRFCT
                üìÑ Tx: \${event.transactionHash}
            \`);
            
            await this.sendAlert(\`üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º \${user}, –∫–æ–º–∏—Å—Å–∏—è: \${feeFormatted} PRFCT\`);
            this.log(\`EmergencyUnlock: \${user} emergency unlocked with fee \${feeFormatted} PRFCT\`, "WARNING");
        });
    }
    
    setupSwapMonitor() {
        this.token.on("SwapExecuted", async (user, coreAmount, usdtAmount, prfctAmount, treasuryFee, event) => {
            this.eventCounts.swapExecuted++;
            
            const coreFormatted = ethers.utils.formatEther(coreAmount);
            const usdtFormatted = ethers.utils.formatUnits(usdtAmount, 6);
            const prfctFormatted = ethers.utils.formatEther(prfctAmount);
            const feeFormatted = ethers.utils.formatUnits(treasuryFee, 6);
            
            console.log(\`üí± Swap Executed:
                üë§ User: \${user}
                ü™ô CORE: \${coreFormatted}
                üíµ USDT: \${usdtFormatted}
                üéØ PRFCT: \${prfctFormatted}
                üí∏ Fee: \${feeFormatted} USDT
                üìÑ Tx: \${event.transactionHash}
            \`);
            
            this.log(\`SwapExecuted: \${user} swapped \${coreFormatted} CORE for \${prfctFormatted} PRFCT\`, "INFO");
            
            if (ethers.utils.parseEther(prfctFormatted).gte(CONFIG.ALERT_THRESHOLDS.LARGE_SWAP)) {
                await this.sendAlert(\`üí± –ö—Ä—É–ø–Ω—ã–π –æ–±–º–µ–Ω: \${prfctFormatted} PRFCT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º \${user}\`);
            }
        });
    }
    
    setupSecurityMonitor() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—É–∑—ã
        this.token.on("Paused", async (account, event) => {
            this.eventCounts.emergencyEvents++;
            
            console.log(\`‚è∏Ô∏è  Contract Paused by: \${account}\`);
            await this.sendAlert(\`üö® –ö–û–ù–¢–†–ê–ö–¢ –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º \${account}\`);
            this.log(\`Contract paused by \${account}\`, "CRITICAL");
        });
        
        this.token.on("Unpaused", async (account, event) => {
            console.log(\`‚ñ∂Ô∏è  Contract Unpaused by: \${account}\`);
            await this.sendAlert(\`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º \${account}\`);
            this.log(\`Contract unpaused by \${account}\`, "INFO");
        });
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞—É–∑—ã —Ñ—É–Ω–∫—Ü–∏–π
        this.token.on("FunctionPauseChanged", async (selector, paused, event) => {
            const action = paused ? "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" : "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞";
            console.log(\`üîß Function \${selector} \${action}\`);
            this.log(\`Function \${selector} pause changed to \${paused}\`, "WARNING");
        });
    }
    
    setupAdminMonitor() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π
        this.token.on("RoleGranted", async (role, account, sender, event) => {
            console.log(\`üëë Role Granted: \${role} to \${account} by \${sender}\`);
            this.log(\`Role \${role} granted to \${account} by \${sender}\`, "WARNING");
        });
        
        this.token.on("RoleRevoked", async (role, account, sender, event) => {
            console.log(\`üëë Role Revoked: \${role} from \${account} by \${sender}\`);
            await this.sendAlert(\`üîê –†–æ–ª—å \${role} –æ—Ç–æ–∑–≤–∞–Ω–∞ —É \${account}\`);
            this.log(\`Role \${role} revoked from \${account} by \${sender}\`, "WARNING");
        });
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π allowances
        this.token.on("SpendingAllowanceUpdated", async (user, amount, event) => {
            const amountFormatted = ethers.utils.formatEther(amount);
            console.log(\`üí≥ Spending Allowance Updated: \${user} -> \${amountFormatted} PRFCT\`);
            this.log(\`SpendingAllowance updated for \${user}: \${amountFormatted} PRFCT\`, "INFO");
        });
    }
    
    setupPeriodicReports() {
        // –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.generatePeriodicReport();
        }, 5 * 60 * 1000);
        
        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        setInterval(() => {
            this.generateDailyReport();
        }, 24 * 60 * 60 * 1000);
    }
    
    generatePeriodicReport() {
        const uptime = Math.floor((Date.now() - this.startTime) / 1000);
        const hours = Math.floor(uptime / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        
        console.log(\`\\nüìä === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ ===\`);
        console.log(\`‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: \${hours}—á \${minutes}–º\`);
        console.log(\`üî• –¢—Ä–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã: \${this.eventCounts.serviceSpending}\`);
        console.log(\`üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: \${this.eventCounts.resourcesLocked}\`);
        console.log(\`üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: \${this.eventCounts.resourcesUnlocked}\`);
        console.log(\`üí± –û–±–º–µ–Ω—ã: \${this.eventCounts.swapExecuted}\`);
        console.log(\`üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: \${this.eventCounts.emergencyEvents}\`);
        console.log(\`=================================\\n\`);
        
        this.log(\`Periodic report: \${JSON.stringify(this.eventCounts)}\`, "INFO");
    }
    
    async generateDailyReport() {
        try {
            const totalSupply = await this.token.totalSupply();
            const contractBalance = await this.token.balanceOf(this.token.address);
            
            const report = {
                date: new Date().toISOString().split('T')[0],
                totalSupply: ethers.utils.formatEther(totalSupply),
                contractBalance: ethers.utils.formatEther(contractBalance),
                eventCounts: { ...this.eventCounts },
                uptime: Math.floor((Date.now() - this.startTime) / 1000)
            };
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            const reportPath = \`./reports/daily-\${report.date}.json\`;
            await this.ensureDirectoryExists('./reports');
            fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
            
            console.log(\`üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \${reportPath}\`);
            this.log(\`Daily report generated: \${reportPath}\`, "INFO");
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:", error.message);
            this.log(\`Daily report generation failed: \${error.message}\`, "ERROR");
        }
    }
    
    async sendToAnalytics(data) {
        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
            if (process.env.ANALYTICS_API_URL) {
                const response = await fetch(process.env.ANALYTICS_API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                if (!response.ok) {
                    throw new Error(\`Analytics API error: \${response.status}\`);
                }
            }
        } catch (error) {
            console.error("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É:", error.message);
            this.log(\`Analytics send failed: \${error.message}\`, "WARNING");
        }
    }
    
    async sendAlert(message) {
        try {
            console.log(\`üö® ALERT: \${message}\`);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram/Discord/Slack
            if (CONFIG.WEBHOOK_URL) {
                const payload = {
                    content: \`ü§ñ **Perfect Pitcher Monitor**\\n\${message}\`,
                    timestamp: new Date().toISOString()
                };
                
                const response = await fetch(CONFIG.WEBHOOK_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(\`Webhook error: \${response.status}\`);
                }
            }
            
            this.log(\`ALERT: \${message}\`, "ALERT");
            
        } catch (error) {
            console.error("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error.message);
            this.log(\`Alert send failed: \${error.message}\`, "ERROR");
        }
    }
    
    initializeLogger() {
        this.ensureDirectoryExists('./logs');
    }
    
    async ensureDirectoryExists(dir) {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
    }
    
    log(message, level = "INFO") {
        const timestamp = new Date().toISOString();
        const logLine = \`[\${timestamp}] [\${level}] \${message}\\n\`;
        
        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        fs.appendFileSync(CONFIG.LOG_FILE, logLine);
        
        // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (level === "ERROR" || level === "CRITICAL" || level === "ALERT") {
            console.error(logLine.trim());
        }
    }
    
    stop() {
        console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
        this.isRunning = false;
        this.token.removeAllListeners();
        this.log("Monitoring stopped", "INFO");
    }
    
    // Graceful shutdown
    setupGracefulShutdown() {
        process.on('SIGINT', () => {
            console.log('\\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
            this.stop();
            process.exit(0);
        });
        
        process.on('SIGTERM', () => {
            console.log('\\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
            this.stop();
            process.exit(0);
        });
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function main() {
    const monitor = new PerfectPitcherMonitor();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
    monitor.setupGracefulShutdown();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
    const initialized = await monitor.initialize();
    if (initialized) {
        await monitor.startMonitoring();
        
        // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
        setInterval(() => {
            if (!monitor.isRunning) {
                console.log("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
                monitor.startMonitoring();
            }
        }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    } else {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    main().catch((error) => {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", error);
        process.exit(1);
    });
}

module.exports = { PerfectPitcherMonitor, CONFIG };

