// scripts/check-balance.js - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
const { ethers, network } = require("hardhat");

async function main() {
    console.log("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è");
    console.log("‚ïê".repeat(50));
    
    console.log("üåê –°–µ—Ç—å:", network.name);
    console.log("üîó Chain ID:", network.config.chainId);
    console.log("üåç RPC URL:", network.config.url);
    
    try {
        const [signer] = await ethers.getSigners();
        console.log("üë§ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:", signer.address);
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        const balance = await ethers.provider.getBalance(signer.address);
        const balanceInEther = ethers.formatEther(balance);
        
        console.log("üí∞ –ë–∞–ª–∞–Ω—Å:", balanceInEther, "TCORE2");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        const minBalance = 0.1; // –ú–∏–Ω–∏–º—É–º 0.1 TCORE2
        const recommendedBalance = 0.5; // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.5 TCORE2
        
        if (parseFloat(balanceInEther) < minBalance) {
            console.log("‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í!");
            console.log(`üö® –ú–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${minBalance} TCORE2`);
            console.log("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã: https://scan.test2.btcs.network/faucet");
            return false;
        } else if (parseFloat(balanceInEther) < recommendedBalance) {
            console.log("‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è");
            console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${recommendedBalance} TCORE2`);
        } else {
            console.log("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
        console.log("\\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏...");
        
        const blockNumber = await ethers.provider.getBlockNumber();
        const latestBlock = await ethers.provider.getBlock(blockNumber);
        
        console.log("üì¶ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫:", blockNumber);
        console.log("‚è∞ –í—Ä–µ–º—è –±–ª–æ–∫–∞:", new Date(latestBlock.timestamp * 1000).toLocaleString());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º gas price
        const gasPrice = await ethers.provider.getFeeData().then(fee => fee.gasPrice);
        console.log("‚õΩ Gas Price:", ethers.formatUnits(gasPrice, "gwei"), "gwei");
        
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        const estimatedGas = 5000000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        const estimatedCost = BigInt(estimatedGas) * gasPrice;
        const costInEther = ethers.formatEther(estimatedCost);
        
        console.log("\\nüí∏ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:");
        console.log("üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≥–∞–∑:", estimatedGas.toLocaleString());
        console.log("üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:", costInEther, "TCORE2");
        
        const remainingAfterDeploy = parseFloat(balanceInEther) - parseFloat(costInEther);
        console.log("üè¶ –û—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è:", remainingAfterDeploy.toFixed(4), "TCORE2");
        
        if (remainingAfterDeploy < 0) {
            console.log("‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≥–∞–∑–∞!");
            return false;
        }
        
        console.log("\\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.");
        return true;
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:", error.message);
        
        if (error.message.includes("could not detect network")) {
            console.error("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –≤ hardhat.config.js");
        } else if (error.message.includes("private key")) {
            console.error("üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PRIVATE_KEY –≤ .env —Ñ–∞–π–ª–µ");
        } else if (error.message.includes("network")) {
            console.error("üîó –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ RPC");
        }
        
        return false;
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function checkConfig() {
    console.log("\\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if (!process.env.PRIVATE_KEY) {
        console.log("‚ùå PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
        return false;
    }
    
    if (process.env.PRIVATE_KEY.length !== 66) {
        console.log("‚ùå PRIVATE_KEY –Ω–µ–≤–µ—Ä–Ω–æ–π –¥–ª–∏–Ω—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 66 —Å–∏–º–≤–æ–ª–æ–≤ —Å 0x)");
        return false;
    }
    
    console.log("‚úÖ PRIVATE_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (network.name === 'coreTestnet') {
        console.log("‚úÖ –°–µ—Ç—å: Core Testnet");
        console.log("‚úÖ Chain ID:", network.config.chainId);
        console.log("‚úÖ RPC URL:", network.config.url);
    } else {
        console.log("‚ö†Ô∏è  –¢–µ–∫—É—â–∞—è —Å–µ—Ç—å:", network.name);
        console.log("üí° –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --network coreTestnet");
    }
    
    return true;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = { main, checkConfig };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    Promise.all([checkConfig(), main()])
        .then(([configOk, balanceOk]) => {
            if (configOk && balanceOk) {
                console.log("\\nüöÄ –í–°–ï –ì–û–¢–û–í–û –î–õ–Ø –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø!");
                console.log("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx hardhat run scripts/deploy-real-testnet.js --network coreTestnet");
            } else {
                console.log("\\n‚ùå –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º");
            }
            process.exit(0);
        })
        .catch((error) => {
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
            process.exit(1);
        });
}
