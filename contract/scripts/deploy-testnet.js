// scripts/deploy-testnet.js - –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const { ethers, upgrades } = require("hardhat");

async function main() {
    console.log("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Perfect Pitcher Token –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...");
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º signers (—Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
        const [deployer] = await ethers.getSigners();
        console.log("üìã –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–∞:", deployer.address);
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π)
        const TREASURY_ADDRESS = deployer.address;
        const ICECREAM_ROUTER = "0x8f08C0D82b04176b5C778BFE5A4b74EF433E4F4A"; // IceCreamSwap Router
        const CORE_PRICE_FEED = deployer.address; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ø–ª–æ–π–µ—Ä–∞ –∫–∞–∫ mock
        const USDT_PRICE_FEED = deployer.address; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ø–ª–æ–π–µ—Ä–∞ –∫–∞–∫ mock
        
        console.log("üí∞ –ë–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞:", ethers.formatEther(await ethers.provider.getBalance(deployer.address)), "ETH");
        
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º mock –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log("üîß –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ mock –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...");
        
        const MockRouter = await ethers.getContractFactory("MockDEXRouter");
        const mockRouter = await MockRouter.deploy();
        await mockRouter.waitForDeployment();
        console.log("‚úÖ MockDEXRouter —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç:", await mockRouter.getAddress());
        
        const MockPriceFeed = await ethers.getContractFactory("MockAggregatorV3");
        const mockPriceFeed = await MockPriceFeed.deploy(ethers.parseUnits("100", 8)); // $100
        await mockPriceFeed.waitForDeployment();
        console.log("‚úÖ MockAggregatorV3 —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç:", await mockPriceFeed.getAddress());
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const PerfectPitcherToken = await ethers.getContractFactory("PerfectPitcherToken");
        
        // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ UUPS proxy
        console.log("üîß –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ UUPS proxy –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
        const token = await upgrades.deployProxy(
            PerfectPitcherToken,
            [
                TREASURY_ADDRESS,
                await mockRouter.getAddress(),
                await mockPriceFeed.getAddress(),
                await mockPriceFeed.getAddress()
            ],
            { 
                initializer: 'initialize',
                kind: 'uups'
            }
        );
        
        await token.waitForDeployment();
        const tokenAddress = await token.getAddress();
        
        console.log("‚úÖ Perfect Pitcher Token —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É:", tokenAddress);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ proxy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        try {
            const adminAddress = await upgrades.erc1967.getAdminAddress(tokenAddress);
            const implementationAddress = await upgrades.erc1967.getImplementationAddress(tokenAddress);
            console.log("üìù Proxy admin:", adminAddress);
            console.log("üîß Implementation:", implementationAddress);
        } catch (error) {
            console.log("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å proxy –∞–¥—Ä–µ—Å–∞:", error.message);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞
        console.log("\\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–∞:");
        console.log("- –ù–∞–∑–≤–∞–Ω–∏–µ:", await token.name());
        console.log("- –°–∏–º–≤–æ–ª:", await token.symbol());
        console.log("- –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏:", await token.decimals());
        console.log("- –û–±—â–∏–π –æ–±—ä–µ–º —ç–º–∏—Å—Å–∏–∏:", ethers.formatEther(await token.totalSupply()), "PRFCT");
        console.log("- –ë–∞–ª–∞–Ω—Å treasury:", ethers.formatEther(await token.balanceOf(TREASURY_ADDRESS)), "PRFCT");
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–æ–ª–µ–π
        console.log("\\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π...");
        
        const OPERATOR_ROLE = await token.OPERATOR_ROLE();
        const SERVICE_ROLE = await token.SERVICE_ROLE();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ø–ª–æ–π–µ—Ä–∞ –≤–æ –≤—Å–µ —Ä–æ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
            await token.grantRole(OPERATOR_ROLE, deployer.address);
            console.log(`‚úÖ OPERATOR_ROLE –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${deployer.address}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è  OPERATOR_ROLE —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: ${error.message}`);
        }
        
        try {
            await token.grantRole(SERVICE_ROLE, deployer.address);
            console.log(`‚úÖ SERVICE_ROLE –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${deployer.address}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è  SERVICE_ROLE —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: ${error.message}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
        console.log("\\nüë• –°—Ç–∞—Ç—É—Å —Ä–æ–ª–µ–π:");
        console.log("- DEFAULT_ADMIN_ROLE:", await token.hasRole(await token.DEFAULT_ADMIN_ROLE(), deployer.address));
        console.log("- OPERATOR_ROLE:", await token.hasRole(OPERATOR_ROLE, deployer.address));
        console.log("- SERVICE_ROLE:", await token.hasRole(SERVICE_ROLE, deployer.address));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const config = await token.config();
        console.log("\\n‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:");
        console.log("- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç—ã:", ethers.formatEther(config.maxSpendingAmount), "PRFCT");
        console.log("- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", config.maxLockDuration.toString(), "—Å–µ–∫—É–Ω–¥");
        console.log("- –ö–æ–º–∏—Å—Å–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", Number(config.emergencyUnlockFee) / 100, "%");
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        console.log("\\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...");
        
        try {
            // –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ spending allowance
            await token.setSpendingAllowance(deployer.address, ethers.parseEther("1000"));
            const allowance = await token.spendingAllowances(deployer.address);
            console.log("‚úÖ Spending allowance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", ethers.formatEther(allowance), "PRFCT");
            
            // –¢–µ—Å—Ç burning —Ç–æ–∫–µ–Ω–æ–≤
            const burnAmount = ethers.parseEther("100");
            await token.burn(burnAmount);
            console.log("‚úÖ –°–æ–∂–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", ethers.formatEther(burnAmount), "PRFCT");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            const newBalance = await token.balanceOf(deployer.address);
            console.log("‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å treasury:", ethers.formatEther(newBalance), "PRFCT");
            
        } catch (error) {
            console.log("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:", error.message);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
        const deploymentInfo = {
            network: "hardhat-local",
            tokenAddress: tokenAddress,
            mockRouter: await mockRouter.getAddress(),
            mockPriceFeed: await mockPriceFeed.getAddress(),
            treasury: TREASURY_ADDRESS,
            deployer: deployer.address,
            blockNumber: await ethers.provider.getBlockNumber(),
            timestamp: new Date().toISOString(),
            roles: {
                admin: deployer.address,
                operator: deployer.address,
                service: deployer.address
            }
        };
        
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log("\\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:");
        console.table(deploymentInfo);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        const fs = require('fs');
        const deploymentPath = `./deployments/testnet-deployment-${Date.now()}.json`;
        fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
        console.log("\\nüìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:", deploymentPath);
        
        console.log("\\nüéâ –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        console.log("\\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
        console.log("1. –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é");
        console.log("2. –í—Å–µ —Ä–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞");
        console.log("3. –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Hardhat console");
        console.log("4. –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–∏—Ç–µ TOKEN_ADDRESS –≤ .env");
        
        return {
            tokenAddress: tokenAddress,
            deploymentInfo: deploymentInfo
        };
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:", error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
            process.exit(1);
        });
}

module.exports = { main };

