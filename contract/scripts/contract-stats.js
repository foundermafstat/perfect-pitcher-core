// scripts/contract-stats.js - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const { ethers } = require("hardhat");

const CONTRACT_ADDRESS = "0xFe442AfE3571dFc30898a2edfCF0E1d2f291cF4A";

async function main() {
    console.log("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Perfect Pitcher Token");
    console.log("‚ïê".repeat(60));
    
    try {
        const token = await ethers.getContractAt("PerfectPitcherToken", CONTRACT_ADDRESS);
        const [admin] = await ethers.getSigners();
        
        console.log("üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", CONTRACT_ADDRESS);
        console.log("üë§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:", admin.address);
        console.log("üïí –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:", new Date().toLocaleString());
        
        // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        await showBasicInfo(token);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        await showTokenStats(token);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª–µ–π
        await showRoleStats(token, admin);
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        await showConfiguration(token);
        
        // –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
        await analyzeEvents(token);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        await showLockStats(token, admin);
        
        console.log("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", error.message);
        throw error;
    }
}

async function showBasicInfo(token) {
    console.log("\nüìã –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø");
    console.log("‚îÄ".repeat(40));
    
    const name = await token.name();
    const symbol = await token.symbol();
    const decimals = await token.decimals();
    const totalSupply = await token.totalSupply();
    const contractBalance = await token.balanceOf(await token.getAddress());
    
    console.log(`üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}`);
    console.log(`üî§ –°–∏–º–≤–æ–ª: ${symbol}`);
    console.log(`üî¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ: ${decimals}`);
    console.log(`üí∞ –û–±—â–∏–π supply: ${ethers.formatEther(totalSupply)} ${symbol}`);
    console.log(`üè¶ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${ethers.formatEther(contractBalance)} ${symbol}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç upgradeable
    try {
        const implementationSlot = "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
        const implementation = await ethers.provider.getStorage(await token.getAddress(), implementationSlot);
        if (implementation !== "0x0000000000000000000000000000000000000000000000000000000000000000") {
            console.log(`üîß Implementation: ${ethers.getAddress("0x" + implementation.slice(-40))}`);
            console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (UUPS)");
        }
    } catch (e) {
        console.log("‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± implementation –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
    }
}

async function showTokenStats(token) {
    console.log("\nüíπ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ö–ï–ù–û–í");
    console.log("‚îÄ".repeat(40));
    
    const signers = await ethers.getSigners();
    const admin = signers[0];
    const accounts = [admin.address];
    
    let totalDistributed = 0n;
    let nonZeroBalances = 0;
    
    for (let i = 0; i < accounts.length; i++) {
        const balance = await token.balanceOf(accounts[i]);
        const allowance = await token.spendingAllowances(accounts[i]);
        
        if (balance > 0n || allowance > 0n) {
            console.log(`\nüë§ Account ${i + 1}: ${accounts[i]}`);
            console.log(`  üí∞ –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} PRFCT`);
            console.log(`  üí≥ Allowance: ${ethers.formatEther(allowance)} PRFCT`);
            
            if (balance > 0n) {
                totalDistributed += balance;
                nonZeroBalances++;
            }
        }
    }
    
    console.log(`\nüìä –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`  üè¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${ethers.formatEther(totalDistributed)} PRFCT`);
    console.log(`  üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º: ${nonZeroBalances}`);
}

async function showRoleStats(token, admin) {
    console.log("\nüîê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–û–õ–ï–ô");
    console.log("‚îÄ".repeat(40));
    
    const roles = [
        { name: "DEFAULT_ADMIN_ROLE", hash: await token.DEFAULT_ADMIN_ROLE() },
        { name: "OPERATOR_ROLE", hash: await token.OPERATOR_ROLE() },
        { name: "SERVICE_ROLE", hash: await token.SERVICE_ROLE() },
        { name: "PAUSER_ROLE", hash: await token.PAUSER_ROLE() },
        { name: "UPGRADER_ROLE", hash: await token.UPGRADER_ROLE() }
    ];
    
    for (const role of roles) {
        const hasRole = await token.hasRole(role.hash, admin.address);
        const memberCount = await token.getRoleMemberCount(role.hash);
        
        console.log(`\nüè∑Ô∏è  ${role.name}:`);
        console.log(`  ‚úÖ –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç —Ä–æ–ª—å: ${hasRole ? "–î–∞" : "–ù–µ—Ç"}`);
        console.log(`  üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${memberCount}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏
        for (let i = 0; i < memberCount; i++) {
            const member = await token.getRoleMember(role.hash, i);
            console.log(`    ${i + 1}. ${member}`);
        }
    }
}

async function showConfiguration(token) {
    console.log("\n‚öôÔ∏è  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–û–ù–¢–†–ê–ö–¢–ê");
    console.log("‚îÄ".repeat(40));
    
    try {
        const config = await token.config();
        
        console.log(`üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Ç–∞: ${ethers.formatEther(config.maxSpendingAmount)} PRFCT`);
        console.log(`‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${config.maxLockDuration} —Å–µ–∫—É–Ω–¥ (${Math.floor(config.maxLockDuration / 86400)} –¥–Ω–µ–π)`);
        console.log(`üö® –ö–æ–º–∏—Å—Å–∏—è emergency unlock: ${Number(config.emergencyUnlockFee) / 100}%`);
        
        const isPaused = await token.paused();
        console.log(`‚è∏Ô∏è  –°—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã: ${isPaused ? "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–ê–∫—Ç–∏–≤–µ–Ω"}`);
        
    } catch (error) {
        console.log("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", error.message);
    }
}

async function analyzeEvents(token) {
    console.log("\nüìà –ê–ù–ê–õ–ò–ó –°–û–ë–´–¢–ò–ô");
    console.log("‚îÄ".repeat(40));
    
    try {
        const currentBlock = await ethers.provider.getBlockNumber();
        const startBlock = Math.max(0, currentBlock - 1000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –±–ª–æ–∫–æ–≤
        
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ ${startBlock} - ${currentBlock}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Transfer —Å–æ–±—ã—Ç–∏—è
        const transferFilter = token.filters.Transfer();
        const transfers = await token.queryFilter(transferFilter, startBlock);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ServiceUsed —Å–æ–±—ã—Ç–∏—è
        const serviceFilter = token.filters.ServiceUsed();
        const services = await token.queryFilter(serviceFilter, startBlock);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ResourcesLocked —Å–æ–±—ã—Ç–∏—è
        const lockFilter = token.filters.ResourcesLocked();
        const locks = await token.queryFilter(lockFilter, startBlock);
        
        console.log(`\nüìä –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥:`);
        console.log(`  üí∏ Transfers: ${transfers.length}`);
        console.log(`  ü§ñ Service –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${services.length}`);
        console.log(`  üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${locks.length}`);
        
        // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
        if (transfers.length > 0) {
            let totalTransferred = 0n;
            const uniqueReceivers = new Set();
            
            transfers.forEach(transfer => {
                totalTransferred += transfer.args.value;
                uniqueReceivers.add(transfer.args.to);
            });
            
            console.log(`\nüí∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤:`);
            console.log(`  üìà –û–±—â–∏–π –æ–±—ä–µ–º: ${ethers.formatEther(totalTransferred)} PRFCT`);
            console.log(`  üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${ethers.formatEther(totalTransferred / BigInt(transfers.length))} PRFCT`);
            console.log(`  üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${uniqueReceivers.size}`);
        }
        
        // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        if (services.length > 0) {
            let totalSpent = 0n;
            const uniqueServices = new Set();
            
            services.forEach(service => {
                totalSpent += service.args.amount;
                uniqueServices.add(service.args.serviceId);
            });
            
            console.log(`\nü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:`);
            console.log(`  üí∞ –û–±—â–∏–µ —Ç—Ä–∞—Ç—ã: ${ethers.formatEther(totalSpent)} PRFCT`);
            console.log(`  üìà –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞—Ç–∞: ${ethers.formatEther(totalSpent / BigInt(services.length))} PRFCT`);
            console.log(`  üîß –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: ${uniqueServices.size}`);
        }
        
    } catch (error) {
        console.log("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—ã—Ç–∏–π:", error.message);
    }
}

async function showLockStats(token, admin) {
    console.log("\nüîí –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–õ–û–ö–ò–†–û–í–û–ö");
    console.log("‚îÄ".repeat(40));
    
    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö lockId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const testLockIds = [
            ethers.keccak256(ethers.toUtf8Bytes("test_lock_1")),
            ethers.keccak256(ethers.toUtf8Bytes("test_lock_2")),
            ethers.keccak256(ethers.toUtf8Bytes("live_broadcast")),
        ];
        
        let activeLocks = 0;
        let totalLocked = 0n;
        
        for (const lockId of testLockIds) {
            try {
                const lockInfo = await token.getLockInfo(admin.address, lockId);
                if (lockInfo.isActive) {
                    activeLocks++;
                    totalLocked += lockInfo.amount;
                    
                    console.log(`\nüîë Lock ID: ${lockId.slice(0, 10)}...`);
                    console.log(`  üí∞ –°—É–º–º–∞: ${ethers.formatEther(lockInfo.amount)} PRFCT`);
                    console.log(`  ‚è∞ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${new Date(Number(lockInfo.unlockTime) * 1000).toLocaleString()}`);
                    console.log(`  ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: ${lockInfo.isActive}`);
                }
            } catch (e) {
                // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            }
        }
        
        console.log(`\nüìä –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:`);
        console.log(`  üî¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ${activeLocks}`);
        console.log(`  üí∞ –û–±—â–∞—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${ethers.formatEther(totalLocked)} PRFCT`);
        
    } catch (error) {
        console.log("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:", error.message);
    }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function quickStats() {
    const token = await ethers.getContractAt("PerfectPitcherToken", CONTRACT_ADDRESS);
    const supply = await token.totalSupply();
    const [admin] = await ethers.getSigners();
    const balance = await token.balanceOf(admin.address);
    
    console.log(`üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`  üí∞ Supply: ${ethers.formatEther(supply)} PRFCT`);
    console.log(`  üè¶ –ë–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∞: ${ethers.formatEther(balance)} PRFCT`);
    console.log(`  üìç –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${CONTRACT_ADDRESS}`);
}

async function checkHealth() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
    
    try {
        const token = await ethers.getContractAt("PerfectPitcherToken", CONTRACT_ADDRESS);
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const name = await token.name();
        const symbol = await token.symbol();
        const totalSupply = await token.totalSupply();
        const isPaused = await token.paused();
        
        console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã");
        console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}`);
        console.log(`‚úÖ –°–∏–º–≤–æ–ª: ${symbol}`);
        console.log(`‚úÖ Supply: ${ethers.formatEther(totalSupply)} PRFCT`);
        console.log(`${isPaused ? "‚ö†Ô∏è" : "‚úÖ"} –°—Ç–∞—Ç—É—Å: ${isPaused ? "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–ê–∫—Ç–∏–≤–µ–Ω"}`);
        
        return true;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
        return false;
    }
}

module.exports = {
    CONTRACT_ADDRESS,
    quickStats,
    checkHealth,
    main
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
            process.exit(1);
        });
}
