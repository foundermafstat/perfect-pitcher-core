// scripts/deploy-and-test.js - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
const { ethers, upgrades } = require("hardhat");

async function deployContract() {
    console.log("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Perfect Pitcher Token...");
    
    const [deployer] = await ethers.getSigners();
    console.log("üìã –î–µ–ø–ª–æ–π–µ—Ä:", deployer.address);
    console.log("üí∞ –ë–∞–ª–∞–Ω—Å:", ethers.formatEther(await ethers.provider.getBalance(deployer.address)), "ETH");
    
    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ mock –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const MockRouter = await ethers.getContractFactory("MockDEXRouter");
    const mockRouter = await MockRouter.deploy();
    await mockRouter.waitForDeployment();
    
    const MockPriceFeed = await ethers.getContractFactory("MockAggregatorV3");
    const mockPriceFeed = await MockPriceFeed.deploy(ethers.parseUnits("100", 8));
    await mockPriceFeed.waitForDeployment();
    
    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const PerfectPitcherToken = await ethers.getContractFactory("PerfectPitcherToken");
    const token = await upgrades.deployProxy(
        PerfectPitcherToken,
        [
            deployer.address, // treasury
            await mockRouter.getAddress(),
            await mockPriceFeed.getAddress(),
            await mockPriceFeed.getAddress()
        ],
        { 
            initializer: 'initialize',
            kind: 'uups'
        }
    );
    
    await token.waitForDeployment();
    const tokenAddress = await token.getAddress();
    
    console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç:", tokenAddress);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π
    await token.grantRole(await token.OPERATOR_ROLE(), deployer.address);
    await token.grantRole(await token.SERVICE_ROLE(), deployer.address);
    
    return { token, deployer, tokenAddress };
}

async function testContract(token, deployer, tokenAddress) {
    console.log("\\nüß™ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...");
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        console.log("\\nüìä –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:");
        console.log("- –ù–∞–∑–≤–∞–Ω–∏–µ:", await token.name());
        console.log("- –°–∏–º–≤–æ–ª:", await token.symbol());
        console.log("- Supply:", ethers.formatEther(await token.totalSupply()), "PRFCT");
        console.log("- –ë–∞–ª–∞–Ω—Å treasury:", ethers.formatEther(await token.balanceOf(deployer.address)), "PRFCT");
        
        // –¢–µ—Å—Ç 1: Burning —Ç–æ–∫–µ–Ω–æ–≤
        console.log("\\nüî• –¢–µ—Å—Ç 1: Burning —Ç–æ–∫–µ–Ω–æ–≤");
        const burnAmount = ethers.parseEther("100");
        const supplyBefore = await token.totalSupply();
        
        await token.burn(burnAmount);
        
        const supplyAfter = await token.totalSupply();
        console.log("‚úÖ –°–æ–∂–∂–µ–Ω–æ:", ethers.formatEther(burnAmount), "PRFCT");
        console.log("üìä Supply –¥–æ:", ethers.formatEther(supplyBefore), "PRFCT");
        console.log("üìä Supply –ø–æ—Å–ª–µ:", ethers.formatEther(supplyAfter), "PRFCT");
        
        // –¢–µ—Å—Ç 2: Spending Allowance
        console.log("\\nüí≥ –¢–µ—Å—Ç 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ spending allowances");
        const allowanceAmount = ethers.parseEther("1000");
        
        await token.setSpendingAllowance(deployer.address, allowanceAmount);
        const allowance = await token.spendingAllowances(deployer.address);
        
        console.log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω allowance:", ethers.formatEther(allowance), "PRFCT");
        
        // –¢–µ—Å—Ç 3: –¢—Ä–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
        console.log("\\nüí∞ –¢–µ—Å—Ç 3: –¢—Ä–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ AI-—Å–µ—Ä–≤–∏—Å");
        const serviceId = ethers.keccak256(ethers.toUtf8Bytes("image_generation"));
        const spendAmount = ethers.parseEther("50");
        
        const balanceBefore = await token.balanceOf(deployer.address);
        const allowanceBefore = await token.spendingAllowances(deployer.address);
        
        await token.spendOnService(deployer.address, spendAmount, serviceId);
        
        const balanceAfter = await token.balanceOf(deployer.address);
        const allowanceAfter = await token.spendingAllowances(deployer.address);
        
        console.log("‚úÖ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–∏—Å:", ethers.formatEther(spendAmount), "PRFCT");
        console.log("üìä –ë–∞–ª–∞–Ω—Å:", ethers.formatEther(balanceBefore), "‚Üí", ethers.formatEther(balanceAfter), "PRFCT");
        console.log("üìä Allowance:", ethers.formatEther(allowanceBefore), "‚Üí", ethers.formatEther(allowanceAfter), "PRFCT");
        
        // –¢–µ—Å—Ç 4: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        console.log("\\nüîí –¢–µ—Å—Ç 4: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏");
        const lockAmount = ethers.parseEther("200");
        const lockDuration = 3600; // 1 —á–∞—Å
        const broadcastServiceId = ethers.keccak256(ethers.toUtf8Bytes("live_broadcast"));
        
        const userBalanceBefore = await token.balanceOf(deployer.address);
        const contractBalanceBefore = await token.balanceOf(tokenAddress);
        
        const tx = await token.lockResourcesForBroadcast(lockAmount, lockDuration, broadcastServiceId);
        const receipt = await tx.wait();
        
        const userBalanceAfter = await token.balanceOf(deployer.address);
        const contractBalanceAfter = await token.balanceOf(tokenAddress);
        
        console.log("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", ethers.formatEther(lockAmount), "PRFCT");
        console.log("üìä –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", ethers.formatEther(userBalanceBefore), "‚Üí", ethers.formatEther(userBalanceAfter), "PRFCT");
        console.log("üìä –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", ethers.formatEther(contractBalanceBefore), "‚Üí", ethers.formatEther(contractBalanceAfter), "PRFCT");
        
        // –ü–æ–ª—É—á–∞–µ–º lockId –∏–∑ —Å–æ–±—ã—Ç–∏—è
        let lockId;
        for (const log of receipt.logs) {
            try {
                const parsed = token.interface.parseLog(log);
                if (parsed.name === "ResourcesLocked") {
                    lockId = parsed.args.lockId;
                    break;
                }
            } catch (e) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–∞–∑–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
            }
        }
        
        if (lockId) {
            console.log("üîë Lock ID:", lockId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            const lockInfo = await token.getLockInfo(deployer.address, lockId);
            console.log("üìã –°—É–º–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", ethers.formatEther(lockInfo.amount), "PRFCT");
            console.log("üìã –ê–∫—Ç–∏–≤–Ω–∞:", lockInfo.isActive);
            
            // –¢–µ—Å—Ç 5: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            console.log("\\nüö® –¢–µ—Å—Ç 5: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞");
            
            const contractBalanceBeforeUnlock = await token.balanceOf(tokenAddress);
            const userBalanceBeforeUnlock = await token.balanceOf(deployer.address);
            
            await token.emergencyUnlock(lockId);
            
            const contractBalanceAfterUnlock = await token.balanceOf(tokenAddress);
            const userBalanceAfterUnlock = await token.balanceOf(deployer.address);
            
            console.log("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%");
            console.log("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", ethers.formatEther(userBalanceBeforeUnlock), "‚Üí", ethers.formatEther(userBalanceAfterUnlock), "PRFCT");
            console.log("üìä –ö–æ–Ω—Ç—Ä–∞–∫—Ç:", ethers.formatEther(contractBalanceBeforeUnlock), "‚Üí", ethers.formatEther(contractBalanceAfterUnlock), "PRFCT");
        }
        
        // –¢–µ—Å—Ç 6: –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        console.log("\\nüì¶ –¢–µ—Å—Ç 6: –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
        const [, user1, user2] = await ethers.getSigners();
        const users = [user1.address, user2.address];
        const amounts = [ethers.parseEther("500"), ethers.parseEther("750")];
        
        await token.batchSetSpendingAllowances(users, amounts);
        
        const allowance1 = await token.spendingAllowances(user1.address);
        const allowance2 = await token.spendingAllowances(user2.address);
        
        console.log("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ allowances:");
        console.log("- User1:", ethers.formatEther(allowance1), "PRFCT");
        console.log("- User2:", ethers.formatEther(allowance2), "PRFCT");
        
        // –¢–µ—Å—Ç 7: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞
        console.log("\\n‚è∏Ô∏è  –¢–µ—Å—Ç 7: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π");
        const burnSelector = token.interface.getFunction("burn").selector;
        
        await token.pauseFunction(burnSelector, true);
        console.log("‚úÖ –§—É–Ω–∫—Ü–∏—è burn –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å burn (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)
        try {
            await token.burn(ethers.parseEther("1"));
            console.log("‚ùå –û—à–∏–±–∫–∞: burn –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!");
        } catch (error) {
            if (error.message.includes("Function is paused")) {
                console.log("‚úÖ burn –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
            } else {
                console.log("‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error.message);
            }
        }
        
        // –°–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        await token.pauseFunction(burnSelector, false);
        await token.burn(ethers.parseEther("1"));
        console.log("‚úÖ –ü–∞—É–∑–∞ —Å–Ω—è—Ç–∞, burn —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç");
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log("\\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        const finalBalance = await token.balanceOf(deployer.address);
        const finalSupply = await token.totalSupply();
        const finalContractBalance = await token.balanceOf(tokenAddress);
        
        console.log("- –ë–∞–ª–∞–Ω—Å treasury:", ethers.formatEther(finalBalance), "PRFCT");
        console.log("- –û–±—â–∏–π supply:", ethers.formatEther(finalSupply), "PRFCT");
        console.log("- –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", ethers.formatEther(finalContractBalance), "PRFCT");
        
        console.log("\\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!");
        
        return {
            tokenAddress,
            testsCompleted: 7,
            finalBalance: ethers.formatEther(finalBalance),
            finalSupply: ethers.formatEther(finalSupply)
        };
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
        throw error;
    }
}

async function main() {
    try {
        // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
        const { token, deployer, tokenAddress } = await deployContract();
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const results = await testContract(token, deployer, tokenAddress);
        
        console.log("\\nüèÅ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û");
        console.log("========================================");
        console.log("üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", results.tokenAddress);
        console.log("‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ:", results.testsCompleted);
        console.log("üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", results.finalBalance, "PRFCT");
        console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–π supply:", results.finalSupply, "PRFCT");
        console.log("\\nüöÄ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
        
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
        process.exit(1);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        process.exit(1);
    });

