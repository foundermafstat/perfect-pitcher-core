// test/BasicTokenTest.js - –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Perfect Pitcher Token
const { expect } = require("chai");
const { ethers, upgrades } = require("hardhat");

describe("Perfect Pitcher Token - Basic Tests", function () {
    let token, owner, user1, treasury, operator, service;
    let mockRouter, mockPriceFeed;
    
    const INITIAL_SUPPLY = ethers.parseEther("1000000000"); // 1 –º–ª—Ä–¥
    
    beforeEach(async function () {
        [owner, user1, treasury, operator, service] = await ethers.getSigners();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ mock –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        const MockContract = await ethers.getContractFactory("MockDEXRouter");
        mockRouter = await MockContract.deploy();
        
        const MockAggregator = await ethers.getContractFactory("MockAggregatorV3");
        mockPriceFeed = await MockAggregator.deploy(ethers.parseUnits("100", 8));
        
        // –î–µ–ø–ª–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const PerfectPitcherToken = await ethers.getContractFactory("PerfectPitcherToken");
        token = await upgrades.deployProxy(
            PerfectPitcherToken,
            [treasury.address, mockRouter.address, mockPriceFeed.address, mockPriceFeed.address],
            { initializer: 'initialize' }
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π
        await token.grantRole(await token.OPERATOR_ROLE(), operator.address);
        await token.grantRole(await token.SERVICE_ROLE(), service.address);
    });
    
    describe("‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", function () {
        it("–î–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω", async function () {
            expect(await token.name()).to.equal("Perfect Pitcher Token");
            expect(await token.symbol()).to.equal("PRFCT");
            expect(await token.decimals()).to.equal(18);
            expect(await token.totalSupply()).to.equal(INITIAL_SUPPLY);
        });
        
        it("Treasury –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π supply", async function () {
            expect(await token.balanceOf(treasury.address)).to.equal(INITIAL_SUPPLY);
        });
        
        it("–î–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–æ–ª–∏", async function () {
            expect(await token.hasRole(await token.DEFAULT_ADMIN_ROLE(), owner.address)).to.be.true;
            expect(await token.hasRole(await token.OPERATOR_ROLE(), operator.address)).to.be.true;
            expect(await token.hasRole(await token.SERVICE_ROLE(), service.address)).to.be.true;
        });
    });
    
    describe("üíº –û—Å–Ω–æ–≤–Ω—ã–µ ERC20 —Ñ—É–Ω–∫—Ü–∏–∏", function () {
        beforeEach(async function () {
            // –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            await token.connect(treasury).transfer(user1.address, ethers.utils.parseEther("1000"));
        });
        
        it("–î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–∫–µ–Ω–æ–≤", async function () {
            const transferAmount = ethers.utils.parseEther("100");
            await token.connect(user1).transfer(owner.address, transferAmount);
            
            expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("900"));
            expect(await token.balanceOf(owner.address)).to.equal(transferAmount);
        });
        
        it("–î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å allowances", async function () {
            const allowanceAmount = ethers.utils.parseEther("500");
            await token.connect(user1).approve(owner.address, allowanceAmount);
            
            expect(await token.allowance(user1.address, owner.address)).to.equal(allowanceAmount);
        });
        
        it("–î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–∂–∏–≥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤", async function () {
            const burnAmount = ethers.utils.parseEther("100");
            const supplyBefore = await token.totalSupply();
            
            await token.connect(user1).burn(burnAmount);
            
            expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("900"));
            expect(await token.totalSupply()).to.equal(supplyBefore.sub(burnAmount));
        });
    });
    
    describe("üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", function () {
        it("–î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É spending allowance", async function () {
            const allowanceAmount = ethers.utils.parseEther("500");
            
            await token.connect(operator).setSpendingAllowance(user1.address, allowanceAmount);
            
            expect(await token.spendingAllowances(user1.address)).to.equal(allowanceAmount);
        });
        
        it("–î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ treasury", async function () {
            const newTreasury = ethers.Wallet.createRandom().address;
            
            await token.connect(owner).updateTreasury(newTreasury);
            
            expect(await token.treasury()).to.equal(newTreasury);
        });
        
        it("–î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", async function () {
            const newConfig = {
                maxSpendingAmount: ethers.utils.parseEther("200000"),
                maxLockDuration: 14 * 24 * 3600, // 14 –¥–Ω–µ–π
                serviceCount: 5,
                emergencyUnlockFee: 300 // 3%
            };
            
            await token.connect(operator).updateConfig(newConfig);
            
            const config = await token.config();
            expect(config.maxSpendingAmount).to.equal(newConfig.maxSpendingAmount);
            expect(config.emergencyUnlockFee).to.equal(newConfig.emergencyUnlockFee);
        });
    });
    
    describe("üí∞ SaaS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", function () {
        beforeEach(async function () {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è SaaS —Ç–µ—Å—Ç–æ–≤
            await token.connect(treasury).transfer(user1.address, ethers.utils.parseEther("1000"));
            await token.connect(operator).setSpendingAllowance(user1.address, ethers.utils.parseEther("500"));
        });
        
        it("–î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å", async function () {
            const spendAmount = ethers.utils.parseEther("50");
            const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("test_service"));
            
            await expect(token.connect(service).spendOnService(user1.address, spendAmount, serviceId))
                .to.emit(token, "ServiceSpending")
                .withArgs(user1.address, spendAmount, serviceId, service.address);
            
            expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("950"));
            expect(await token.spendingAllowances(user1.address)).to.equal(ethers.utils.parseEther("450"));
        });
        
        it("–î–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤", async function () {
            const lockAmount = ethers.utils.parseEther("100");
            const duration = 3600; // 1 —á–∞—Å
            const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("broadcast"));
            
            await expect(token.connect(user1).lockResourcesForBroadcast(lockAmount, duration, serviceId))
                .to.emit(token, "ResourcesLocked");
            
            expect(await token.balanceOf(token.address)).to.equal(lockAmount);
            expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("900"));
        });
    });
    
    describe("üîí –ü–∞—É–∑—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", function () {
        it("–î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–∞—É–∑—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", async function () {
            await token.pause();
            
            await expect(
                token.connect(user1).transfer(owner.address, 100)
            ).to.be.revertedWith("Pausable: paused");
            
            await token.unpause();
            
            // –ü–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –ø–∞—É–∑—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
            await token.connect(treasury).transfer(user1.address, 100);
            await token.connect(user1).transfer(owner.address, 100);
        });
        
        it("–î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞—É–∑—É —Ñ—É–Ω–∫—Ü–∏–π", async function () {
            const selector = token.interface.getSighash("burn");
            await token.pauseFunction(selector, true);
            
            await token.connect(treasury).transfer(user1.address, 100);
            
            await expect(
                token.connect(user1).burn(50)
            ).to.be.revertedWith("Function is paused");
            
            // –°–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É
            await token.pauseFunction(selector, false);
            await token.connect(user1).burn(50); // –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        });
    });
    
    describe("üìä View —Ñ—É–Ω–∫—Ü–∏–∏", function () {
        it("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", async function () {
            const config = await token.config();
            
            expect(config.maxSpendingAmount).to.equal(ethers.utils.parseEther("100000"));
            expect(config.maxLockDuration).to.equal(7 * 24 * 3600); // 7 –¥–Ω–µ–π
            expect(config.emergencyUnlockFee).to.equal(500); // 5%
        });
        
        it("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ–∫–µ–Ω–∞", async function () {
            expect(await token.MAX_SUPPLY()).to.equal(ethers.utils.parseEther("10000000000"));
            expect(await token.INITIAL_SUPPLY()).to.equal(ethers.utils.parseEther("1000000000"));
            expect(await token.TREASURY_FEE()).to.equal(100); // 1%
        });
    });
});
