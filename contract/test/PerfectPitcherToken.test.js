// test/PerfectPitcherToken.test.js
const { expect } = require("chai");
const { ethers, upgrades } = require("hardhat");

describe("Perfect Pitcher Token", function () {
    let token, owner, user1, user2, treasury, operator, service, attacker;
    let mockRouter, mockPriceFeed, mockCoreToken, mockUSDTToken;
    
    const INITIAL_SUPPLY = ethers.utils.parseEther("1000000000"); // 1 –º–ª—Ä–¥
    const MOCK_PRICE = ethers.utils.parseUnits("100", 8); // $100 —Å 8 decimals
    
    beforeEach(async function () {
        [owner, user1, user2, treasury, operator, service, attacker] = await ethers.getSigners();
        
        // –î–µ–ø–ª–æ–π mock –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        const MockERC20 = await ethers.getContractFactory("MockERC20");
        mockCoreToken = await MockERC20.deploy("Core Token", "CORE", 18);
        mockUSDTToken = await MockERC20.deploy("USD Tether", "USDT", 6);
        
        const MockRouter = await ethers.getContractFactory("MockDEXRouter");
        mockRouter = await MockRouter.deploy();
        
        const MockPriceFeed = await ethers.getContractFactory("MockAggregatorV3");
        mockPriceFeed = await MockPriceFeed.deploy(MOCK_PRICE);
        
        // –î–µ–ø–ª–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const PerfectPitcherToken = await ethers.getContractFactory("PerfectPitcherToken");
        token = await upgrades.deployProxy(
            PerfectPitcherToken,
            [treasury.address, mockRouter.address, mockPriceFeed.address, mockPriceFeed.address],
            { initializer: 'initialize' }
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π
        await token.grantRole(await token.OPERATOR_ROLE(), operator.address);
        await token.grantRole(await token.SERVICE_ROLE(), service.address);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        await mockRouter.setAmountOut(ethers.utils.parseEther("100")); // 100 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å–≤–∞–ø
    });
    
    describe("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", function () {
        it("–î–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω", async function () {
            expect(await token.name()).to.equal("Perfect Pitcher Token");
            expect(await token.symbol()).to.equal("PRFCT");
            expect(await token.decimals()).to.equal(18);
            expect(await token.totalSupply()).to.equal(INITIAL_SUPPLY);
            expect(await token.balanceOf(treasury.address)).to.equal(INITIAL_SUPPLY);
        });
        
        it("–î–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–æ–ª–∏", async function () {
            expect(await token.hasRole(await token.DEFAULT_ADMIN_ROLE(), owner.address)).to.be.true;
            expect(await token.hasRole(await token.OPERATOR_ROLE(), operator.address)).to.be.true;
            expect(await token.hasRole(await token.SERVICE_ROLE(), service.address)).to.be.true;
        });
        
        it("–î–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", async function () {
            const config = await token.config();
            expect(config.maxSpendingAmount).to.equal(ethers.utils.parseEther("100000"));
            expect(config.maxLockDuration).to.equal(7 * 24 * 3600); // 7 –¥–Ω–µ–π
            expect(config.emergencyUnlockFee).to.equal(500); // 5%
        });
        
        it("–ù–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é", async function () {
            await expect(
                token.initialize(treasury.address, mockRouter.address, mockPriceFeed.address, mockPriceFeed.address)
            ).to.be.revertedWith("Initializable: contract is already initialized");
        });
    });
    
    describe("üíº SaaS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", function () {
        beforeEach(async function () {
            // –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            await token.connect(treasury).transfer(user1.address, ethers.utils.parseEther("1000"));
            await token.connect(operator).setSpendingAllowance(user1.address, ethers.utils.parseEther("500"));
        });
        
        describe("–¢—Ä–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã", function () {
            it("‚úÖ –î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å", async function () {
                const spendAmount = ethers.utils.parseEther("50");
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("image_generation"));
                
                await expect(token.connect(service).spendOnService(user1.address, spendAmount, serviceId))
                    .to.emit(token, "ServiceSpending")
                    .withArgs(user1.address, spendAmount, serviceId, service.address)
                    .and.to.emit(token, "TokensBurned")
                    .withArgs(user1.address, spendAmount);
                    
                expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("950"));
                expect(await token.spendingAllowances(user1.address)).to.equal(ethers.utils.parseEther("450"));
                expect(await token.totalSupply()).to.equal(INITIAL_SUPPLY.sub(spendAmount));
            });
            
            it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–∞—Ç—É –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", async function () {
                const spendAmount = ethers.utils.parseEther("600"); // –ë–æ–ª—å—à–µ allowance
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("image_generation"));
                
                await expect(
                    token.connect(service).spendOnService(user1.address, spendAmount, serviceId)
                ).to.be.revertedWith("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Ç—Ä–∞—Ç—É");
            });
            
            it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–∞—Ç—É –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞", async function () {
                const spendAmount = ethers.utils.parseEther("50");
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("image_generation"));
                
                await expect(
                    token.connect(attacker).spendOnService(user1.address, spendAmount, serviceId)
                ).to.be.revertedWith(`AccessControl: account ${attacker.address.toLowerCase()} is missing role`);
            });
            
            it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–∞—Ç—É –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –º–∞–∫—Å–∏–º—É–º", async function () {
                const config = await token.config();
                const largeAmount = config.maxSpendingAmount.add(1);
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("image_generation"));
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º allowance
                await token.connect(operator).setSpendingAllowance(user1.address, largeAmount);
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω–æ–≤
                await token.connect(treasury).transfer(user1.address, largeAmount);
                
                await expect(
                    token.connect(service).spendOnService(user1.address, largeAmount, serviceId)
                ).to.be.revertedWith("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç—ã");
            });
        });
        
        describe("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π", function () {
            it("‚úÖ –î–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π", async function () {
                const lockAmount = ethers.utils.parseEther("100");
                const duration = 3600; // 1 —á–∞—Å
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("broadcast"));
                
                const tx = await token.connect(user1).lockResourcesForBroadcast(lockAmount, duration, serviceId);
                const receipt = await tx.wait();
                
                // –ü–æ–ª—É—á–∞–µ–º lockId –∏–∑ —Å–æ–±—ã—Ç–∏—è
                const event = receipt.events.find(e => e.event === "ResourcesLocked");
                const lockId = event.args.lockId;
                
                expect(await token.balanceOf(token.address)).to.equal(lockAmount);
                expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("900"));
                expect(await token.isLockActive(user1.address, lockId)).to.be.true;
                
                const lockInfo = await token.getLockInfo(user1.address, lockId);
                expect(lockInfo.amount).to.equal(lockAmount);
                expect(lockInfo.serviceId).to.equal(serviceId);
                expect(lockInfo.isActive).to.be.true;
            });
            
            it("‚úÖ –î–æ–ª–∂–µ–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏", async function () {
                const lockAmount = ethers.utils.parseEther("100");
                const duration = 3600;
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("broadcast"));
                
                const tx = await token.connect(user1).lockResourcesForBroadcast(lockAmount, duration, serviceId);
                const receipt = await tx.wait();
                const lockId = receipt.events.find(e => e.event === "ResourcesLocked").args.lockId;
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º—è –≤–ø–µ—Ä–µ–¥
                await ethers.provider.send("evm_increaseTime", [duration + 1]);
                await ethers.provider.send("evm_mine");
                
                const actualSpent = ethers.utils.parseEther("30"); // –ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ 30 —Ç–æ–∫–µ–Ω–æ–≤
                const expectedReturn = lockAmount.sub(actualSpent);
                
                await expect(token.connect(user1).unlockResourcesAfterBroadcast(lockId, actualSpent))
                    .to.emit(token, "ResourcesUnlocked")
                    .withArgs(user1.address, expectedReturn, lockId)
                    .and.to.emit(token, "TokensBurned")
                    .withArgs(token.address, actualSpent);
                
                expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("970")); // 900 + 70 returned
                expect(await token.isLockActive(user1.address, lockId)).to.be.false;
            });
            
            it("‚úÖ –î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π", async function () {
                const lockAmount = ethers.utils.parseEther("100");
                const duration = 3600;
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("broadcast"));
                
                const tx = await token.connect(user1).lockResourcesForBroadcast(lockAmount, duration, serviceId);
                const receipt = await tx.wait();
                const lockId = receipt.events.find(e => e.event === "ResourcesLocked").args.lockId;
                
                const config = await token.config();
                const feeAmount = lockAmount.mul(config.emergencyUnlockFee).div(10000);
                const returnAmount = lockAmount.sub(feeAmount);
                
                await expect(token.connect(user1).emergencyUnlock(lockId))
                    .to.emit(token, "EmergencyUnlock")
                    .withArgs(user1.address, lockId, feeAmount);
                
                expect(await token.balanceOf(user1.address)).to.equal(ethers.utils.parseEther("900").add(returnAmount));
                expect(await token.balanceOf(treasury.address)).to.equal(INITIAL_SUPPLY.sub(ethers.utils.parseEther("1000")).add(feeAmount));
            });
            
            it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫", async function () {
                const lockAmount = ethers.utils.parseEther("100");
                const duration = 8 * 24 * 3600; // 8 –¥–Ω–µ–π (–±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞)
                const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("broadcast"));
                
                await expect(
                    token.connect(user1).lockResourcesForBroadcast(lockAmount, duration, serviceId)
                ).to.be.revertedWith("–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
            });
        });
    });
    
    describe("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", function () {
        beforeEach(async function () {
            await token.connect(treasury).transfer(user1.address, ethers.utils.parseEther("1000"));
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å reentrancy –∞—Ç–∞–∫–∏", async function () {
            // –î–µ–ø–ª–æ–π –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const ReentrancyAttacker = await ethers.getContractFactory("ReentrancyAttacker");
            const attackerContract = await ReentrancyAttacker.deploy(token.address);
            
            // –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞—Ç–∞–∫—É—é—â–µ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
            await token.grantRole(await token.SERVICE_ROLE(), attackerContract.address);
            await token.connect(treasury).transfer(attackerContract.address, ethers.utils.parseEther("100"));
            await token.connect(operator).setSpendingAllowance(attackerContract.address, ethers.utils.parseEther("100"));
            
            await expect(attackerContract.attack()).to.be.revertedWith("ReentrancyGuard: reentrant call");
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞—É–∑–æ–π", async function () {
            await token.pause();
            
            await expect(token.connect(user1).transfer(user2.address, 100)).to.be.revertedWith("Pausable: paused");
            
            await token.unpause();
            await expect(token.connect(user1).transfer(user2.address, 100)).to.not.be.reverted;
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞—É–∑—É —Ñ—É–Ω–∫—Ü–∏–π", async function () {
            const selector = token.interface.getSighash("burn");
            await token.pauseFunction(selector, true);
            
            await expect(token.connect(user1).burn(100)).to.be.revertedWith("–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
            
            // –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
            await expect(token.connect(user1).transfer(user2.address, 100)).to.not.be.reverted;
            
            // –°–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É
            await token.pauseFunction(selector, false);
            await expect(token.connect(user1).burn(100)).to.not.be.reverted;
        });
        
        it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", async function () {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—É–∑—ã –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await expect(token.connect(attacker).pause()).to.be.revertedWith("AccessControl");
            
            // –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ allowance
            await expect(
                token.connect(attacker).setSpendingAllowance(user1.address, ethers.utils.parseEther("100"))
            ).to.be.revertedWith("AccessControl");
            
            // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è treasury
            await expect(
                token.connect(attacker).updateTreasury(attacker.address)
            ).to.be.revertedWith("AccessControl");
        });
        
        it("‚ùå –î–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç overflow/underflow", async function () {
            // –¢–µ—Å—Ç –Ω–∞ –∑–∞—â–∏—Ç—É –æ—Ç underflow –≤ allowances
            await token.connect(operator).setSpendingAllowance(user1.address, ethers.utils.parseEther("100"));
            const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("test"));
            
            // –ü–µ—Ä–≤–∞—è —Ç—Ä–∞—Ç–∞
            await token.connect(service).spendOnService(user1.address, ethers.utils.parseEther("50"), serviceId);
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è allowance
            await expect(
                token.connect(service).spendOnService(user1.address, ethers.utils.parseEther("100"), serviceId)
            ).to.be.revertedWith("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Ç—Ä–∞—Ç—É");
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", async function () {
            // –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏
            await expect(
                token.connect(service).spendOnService(user1.address, 0, ethers.utils.keccak256(ethers.utils.toUtf8Bytes("test")))
            ).to.be.revertedWith("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
            
            // –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
            await expect(
                token.connect(operator).setSpendingAllowance(ethers.constants.AddressZero, ethers.utils.parseEther("100"))
            ).to.be.revertedWith("–ù—É–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        });
    });
    
    describe("üí± –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±–º–µ–Ω–Ω–∏–∫", function () {
        beforeEach(async function () {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock —Ç–æ–∫–µ–Ω–æ–≤
            await mockCoreToken.mint(user1.address, ethers.utils.parseEther("1000"));
            await mockUSDTToken.mint(token.address, ethers.utils.parseUnits("100000", 6)); // 100k USDT
            await token.connect(treasury).transfer(token.address, ethers.utils.parseEther("100000")); // 100k PRFCT
            
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
            await mockCoreToken.connect(user1).approve(token.address, ethers.utils.parseEther("1000"));
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–±–º–µ–Ω CORE ‚Üí PRFCT", async function () {
            const coreAmount = ethers.utils.parseEther("10");
            const minPRFCTAmount = ethers.utils.parseEther("90"); // –° —É—á–µ—Ç–æ–º slippage –∏ –∫–æ–º–∏—Å—Å–∏–π
            
            await expect(token.connect(user1).swapCOREtoPRFCT(coreAmount, minPRFCTAmount))
                .to.emit(token, "SwapExecuted");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª PRFCT —Ç–æ–∫–µ–Ω—ã
            expect(await token.balanceOf(user1.address)).to.be.gt(0);
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –≤–∑–∏–º–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –≤ treasury", async function () {
            const coreAmount = ethers.utils.parseEther("10");
            const minPRFCTAmount = ethers.utils.parseEther("1");
            
            const treasuryBalanceBefore = await mockUSDTToken.balanceOf(treasury.address);
            
            await token.connect(user1).swapCOREtoPRFCT(coreAmount, minPRFCTAmount);
            
            const treasuryBalanceAfter = await mockUSDTToken.balanceOf(treasury.address);
            expect(treasuryBalanceAfter).to.be.gt(treasuryBalanceBefore);
        });
        
        it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –æ–±–º–µ–Ω –ø—Ä–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ä–∞–∫—É–ª–∞", async function () {
            // –°–æ–∑–¥–∞–µ–º mock —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const MockPriceFeedStale = await ethers.getContractFactory("MockAggregatorV3");
            const stalePriceFeed = await MockPriceFeedStale.deploy(MOCK_PRICE);
            await stalePriceFeed.setStaleData(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É feed
            await token.connect(owner).updateConfig({
                maxSpendingAmount: ethers.utils.parseEther("100000"),
                maxLockDuration: 7 * 24 * 3600,
                serviceCount: 0,
                emergencyUnlockFee: 500
            });
            
            const coreAmount = ethers.utils.parseEther("10");
            const minPRFCTAmount = ethers.utils.parseEther("90");
            
            // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–ª–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∞–∫—É–ª–∞
        });
    });
    
    describe("üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", function () {
        it("‚úÖ –î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É allowances", async function () {
            const users = [user1.address, user2.address];
            const amounts = [ethers.utils.parseEther("100"), ethers.utils.parseEther("200")];
            
            await expect(token.connect(operator).batchSetSpendingAllowances(users, amounts))
                .to.emit(token, "SpendingAllowanceUpdated")
                .withArgs(user1.address, amounts[0])
                .and.to.emit(token, "SpendingAllowanceUpdated")
                .withArgs(user2.address, amounts[1]);
            
            expect(await token.spendingAllowances(user1.address)).to.equal(amounts[0]);
            expect(await token.spendingAllowances(user2.address)).to.equal(amounts[1]);
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", async function () {
            const newConfig = {
                maxSpendingAmount: ethers.utils.parseEther("200000"),
                maxLockDuration: 14 * 24 * 3600, // 14 –¥–Ω–µ–π
                serviceCount: 5,
                emergencyUnlockFee: 300 // 3%
            };
            
            await token.connect(operator).updateConfig(newConfig);
            
            const config = await token.config();
            expect(config.maxSpendingAmount).to.equal(newConfig.maxSpendingAmount);
            expect(config.maxLockDuration).to.equal(newConfig.maxLockDuration);
            expect(config.emergencyUnlockFee).to.equal(newConfig.emergencyUnlockFee);
        });
        
        it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", async function () {
            const invalidConfig = {
                maxSpendingAmount: 0, // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                maxLockDuration: 14 * 24 * 3600,
                serviceCount: 5,
                emergencyUnlockFee: 300
            };
            
            await expect(
                token.connect(operator).updateConfig(invalidConfig)
            ).to.be.revertedWith("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç—ã");
            
            const invalidFeeConfig = {
                maxSpendingAmount: ethers.utils.parseEther("100000"),
                maxLockDuration: 14 * 24 * 3600,
                serviceCount: 5,
                emergencyUnlockFee: 1500 // 15% - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            };
            
            await expect(
                token.connect(operator).updateConfig(invalidFeeConfig)
            ).to.be.revertedWith("–ö–æ–º–∏—Å—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10%");
        });
        
        it("‚úÖ –î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤", async function () {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            await token.connect(treasury).transfer(token.address, ethers.utils.parseEther("1000"));
            
            // –ü–∞—É–∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            await token.pause();
            
            const withdrawAmount = ethers.utils.parseEther("500");
            const adminBalanceBefore = await token.balanceOf(owner.address);
            
            await token.emergencyWithdraw(owner.address, withdrawAmount);
            
            const adminBalanceAfter = await token.balanceOf(owner.address);
            expect(adminBalanceAfter.sub(adminBalanceBefore)).to.equal(withdrawAmount);
        });
    });
    
    describe("‚¨ÜÔ∏è Upgrade —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", function () {
        it("‚úÖ –î–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ UUPS", async function () {
            // –°–æ–∑–¥–∞–µ–º V2 –∫–æ–Ω—Ç—Ä–∞–∫—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞)
            const PerfectPitcherTokenV2 = await ethers.getContractFactory("PerfectPitcherTokenV2");
            
            const upgraded = await upgrades.upgradeProxy(token.address, PerfectPitcherTokenV2);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            expect(await upgraded.name()).to.equal("Perfect Pitcher Token");
            expect(await upgraded.balanceOf(treasury.address)).to.equal(INITIAL_SUPPLY);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞)
            // expect(await upgraded.version()).to.equal("2.0.0");
        });
        
        it("‚ùå –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å upgrade –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", async function () {
            const PerfectPitcherTokenV2 = await ethers.getContractFactory("PerfectPitcherTokenV2");
            
            // –ü–æ–ø—ã—Ç–∫–∞ upgrade –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ UPGRADER_ROLE
            await expect(
                upgrades.upgradeProxy(token.address, PerfectPitcherTokenV2.connect(attacker))
            ).to.be.revertedWith("AccessControl");
        });
    });
    
    describe("‚ö° –ì–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", function () {
        it("üìä –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ", async function () {
            const users = Array.from({length: 10}, (_, i) => ethers.Wallet.createRandom().address);
            const amounts = Array.from({length: 10}, () => ethers.utils.parseEther("50"));
            
            // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≥–∞–∑–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            const tx = await token.connect(operator).batchSetSpendingAllowances(users, amounts);
            const receipt = await tx.wait();
            
            console.log("        üìà –ì–∞–∑ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):", receipt.gasUsed.toString());
            
            // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
            const tx1 = await token.connect(operator).setSpendingAllowance(users[0], amounts[0]);
            const receipt1 = await tx1.wait();
            
            console.log("        üìà –ì–∞–∑ –¥–ª—è –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:", receipt1.gasUsed.toString());
            console.log("        üéØ –≠–∫–æ–Ω–æ–º–∏—è –≥–∞–∑–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:", receipt1.gasUsed.mul(10).sub(receipt.gasUsed).toString());
        });
        
        it("üìä –ê–Ω–∞–ª–∏–∑ –≥–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", async function () {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            await token.connect(treasury).transfer(user1.address, ethers.utils.parseEther("1000"));
            await token.connect(operator).setSpendingAllowance(user1.address, ethers.utils.parseEther("500"));
            
            // –¢–µ—Å—Ç spending
            const serviceId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("test"));
            const spendTx = await token.connect(service).spendOnService(user1.address, ethers.utils.parseEther("50"), serviceId);
            const spendReceipt = await spendTx.wait();
            console.log("        üí∞ –ì–∞–∑ –¥–ª—è spendOnService:", spendReceipt.gasUsed.toString());
            
            // –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            const lockTx = await token.connect(user1).lockResourcesForBroadcast(
                ethers.utils.parseEther("100"), 
                3600, 
                serviceId
            );
            const lockReceipt = await lockTx.wait();
            console.log("        üîí –ì–∞–∑ –¥–ª—è lockResourcesForBroadcast:", lockReceipt.gasUsed.toString());
            
            // –¢–µ—Å—Ç burn
            const burnTx = await token.connect(user1).burn(ethers.utils.parseEther("10"));
            const burnReceipt = await burnTx.wait();
            console.log("        üî• –ì–∞–∑ –¥–ª—è burn:", burnReceipt.gasUsed.toString());
        });
    });
});
